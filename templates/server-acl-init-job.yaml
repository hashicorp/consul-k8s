{{- if (or (and (ne (.Values.server.enabled | toString) "-") .Values.server.enabled) (and (eq (.Values.server.enabled | toString) "-") .Values.global.enabled)) }}
{{- if (or (and (ne (.Values.client.enabled | toString) "-") .Values.client.enabled) (and (eq (.Values.client.enabled | toString) "-") .Values.global.enabled)) }}
{{- if .Values.global.bootstrapACLs }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ template "consul.fullname" . }}-server-acl-init
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ template "consul.name" . }}
    chart: {{ template "consul.chart" . }}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
spec:
  template:
    metadata:
      name: {{ template "consul.fullname" . }}-server-acl-init
      labels:
        app: {{ template "consul.name" . }}
        chart: {{ template "consul.chart" . }}
        release: {{ .Release.Name }}
        component: server-acl-init
      annotations:
        "consul.hashicorp.com/connect-inject": "false"
    spec:
      restartPolicy: Never
      serviceAccountName: {{ template "consul.fullname" . }}-server-acl-init
      initContainers:
        - name: wait-for-leader
          image: bitnami/kubectl:1.13
          command:
            - "/bin/bash"
            - "-c"
            - |
              echo "Waiting for {{ .Values.server.replicas }} server pods to be running"
              COUNT=0;
              while [[ $COUNT -lt {{ .Values.server.replicas }} ]]; do
                sleep 5s;
                COUNT=$(kubectl get pods -n {{ .Release.Namespace }} -l "app=consul,component=server,release={{.Release.Name}}" | grep 'Running' | wc -l);
                echo "Current count: $COUNT";
              done;
              # Sleep for 10 to allow for leader election.
              sleep 10s;
      containers:
        - name: post-install-job
          image: {{ .Values.global.imageK8S }}
          env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          command:
            - "/bin/sh"
            - "-ec"
            - |
              consul-k8s server-acl-init \
                -release-name={{ .Release.Name }} \
                -k8s-namespace={{ .Release.Namespace }} \
                {{- if .Values.syncCatalog.enabled }}
                -create-sync-token=true \
                {{- end }}
                {{- if (or (and (ne (.Values.dns.enabled | toString) "-") .Values.dns.enabled) (and (eq (.Values.dns.enabled | toString) "-") .Values.global.enabled)) }}
                -allow-dns=true \
                {{- end }}
                {{- if .Values.connectInject.enabled }}
                -create-inject-token=true \
                {{- end }}
                {{- if .Values.meshGateway.enabled }}
                -create-mesh-gateway-token=true \
                {{- end }}
                {{- if .Values.connectInject.aclBindingRuleSelector }}
                -acl-binding-rule-selector={{ .Values.connectInject.aclBindingRuleSelector }} \
                {{- end }}
                {{- if (and .Values.server.enterpriseLicense.secretName .Values.server.enterpriseLicense.secretKey) }}
                -create-enterprise-license-token=true \
                {{- end }}
                {{- if .Values.client.snapshotAgent.enabled }}
                -create-snapshot-agent-token=true \
                {{- end }}
                -expected-replicas={{ .Values.server.replicas }}
{{- end }}
{{- end }}
{{- end }}
