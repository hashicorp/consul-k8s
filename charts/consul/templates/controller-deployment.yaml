{{- if .Values.controller.enabled }}
{{- if and .Values.global.adminPartitions.enabled (not .Values.global.enableConsulNamespaces) }}{{ fail "global.enableConsulNamespaces must be true if global.adminPartitions.enabled=true" }}{{ end }}
{{- if and .Values.externalServers.enabled (not .Values.externalServers.hosts) }}{{ fail "externalServers.hosts must be set if externalServers.enabled is true" }}{{ end -}}
{{ template "consul.validateVaultWebhookCertConfiguration" . }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "consul.fullname" . }}-controller
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ template "consul.name" . }}
    chart: {{ template "consul.chart" . }}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
    component: controller
spec:
  replicas: {{ .Values.controller.replicas }}
  selector:
    matchLabels:
      app: {{ template "consul.name" . }}
      chart: {{ template "consul.chart" . }}
      heritage: {{ .Release.Service }}
      release: {{ .Release.Name }}
      component: controller
  template:
    metadata:
      labels:
        app: {{ template "consul.name" . }}
        chart: {{ template "consul.chart" . }}
        heritage: {{ .Release.Service }}
        release: {{ .Release.Name }}
        component: controller
      annotations:
        "consul.hashicorp.com/connect-inject": "false"
        {{- if (and .Values.global.secretsBackend.vault.enabled .Values.global.tls.enabled) }}
        "vault.hashicorp.com/agent-init-first": "true"
        "vault.hashicorp.com/agent-inject": "true"
        {{- if .Values.global.secretsBackend.vault.controllerRole }}
        "vault.hashicorp.com/role": {{ .Values.global.secretsBackend.vault.controllerRole }}
        {{ else }}
        "vault.hashicorp.com/role": {{ .Values.global.secretsBackend.vault.consulCARole }}
        {{ end }}
        "vault.hashicorp.com/agent-inject-secret-serverca.crt": {{ .Values.global.tls.caCert.secretName }}
        "vault.hashicorp.com/agent-inject-template-serverca.crt": {{ template "consul.serverTLSCATemplate" . }}
        {{- if .Values.global.secretsBackend.vault.controller.caCert.secretName }}
        {{- with .Values.global.secretsBackend.vault.controller.caCert }}
        "vault.hashicorp.com/agent-inject-secret-ca.crt": {{ .secretName }}
        "vault.hashicorp.com/agent-inject-template-ca.crt": {{ template "consul.vaultCATemplate" . }}
        "vault.hashicorp.com/secret-volume-path-ca.crt": "/vault/secrets/controller-webhook/certs"
        {{- end }}
        {{- end }}
        {{- if .Values.global.secretsBackend.vault.controller.tlsCert.secretName }}
        "vault.hashicorp.com/agent-inject-secret-tls.crt": {{ .Values.global.secretsBackend.vault.controller.tlsCert.secretName }}
        "vault.hashicorp.com/agent-inject-template-tls.crt": {{ include "consul.controllerWebhookTLSCertTemplate" . }}
        "vault.hashicorp.com/secret-volume-path-tls.crt": "/vault/secrets/controller-webhook/certs"
        "vault.hashicorp.com/agent-inject-secret-tls.key": {{ .Values.global.secretsBackend.vault.controller.tlsCert.secretName }}
        "vault.hashicorp.com/agent-inject-template-tls.key": {{ include "consul.controllerWebhookTLSKeyTemplate" . }}
        "vault.hashicorp.com/secret-volume-path-tls.key": "/vault/secrets/controller-webhook/certs"
        {{- end }}
        {{- if and .Values.global.secretsBackend.vault.ca.secretName .Values.global.secretsBackend.vault.ca.secretKey }}
        "vault.hashicorp.com/agent-extra-secret": "{{ .Values.global.secretsBackend.vault.ca.secretName }}"
        "vault.hashicorp.com/ca-cert": "/vault/custom/{{ .Values.global.secretsBackend.vault.ca.secretKey }}"
        {{- end }}
        {{- if .Values.global.secretsBackend.vault.agentAnnotations }}
        {{ tpl .Values.global.secretsBackend.vault.agentAnnotations . | nindent 8 | trim }}
        {{- end }}
        {{- end }}
    spec:
      containers:
      - command:
        - "/bin/sh"
        - "-ec"
        - |
          consul-k8s-control-plane controller \
            -log-level={{ default .Values.global.logLevel .Values.controller.logLevel }} \
            -log-json={{ .Values.global.logJSON }} \
            -resource-prefix={{ template "consul.fullname" . }} \
            {{- if and .Values.global.secretsBackend.vault.enabled .Values.global.secretsBackend.vault.controller.tlsCert.secretName }}
            -enable-webhook-ca-update \
            -webhook-tls-cert-dir=/vault/secrets/controller-webhook/certs \
            {{- else }}
            -webhook-tls-cert-dir=/tmp/controller-webhook/certs \
            {{- end }}
            -enable-leader-election \
            {{- if .Values.global.enableConsulNamespaces }}
            -enable-namespaces=true \
            {{- if .Values.connectInject.consulNamespaces.consulDestinationNamespace }}
            -consul-destination-namespace={{ .Values.connectInject.consulNamespaces.consulDestinationNamespace }} \
            {{- end }}
            {{- if .Values.connectInject.consulNamespaces.mirroringK8S }}
            -enable-k8s-namespace-mirroring=true \
            {{- if .Values.connectInject.consulNamespaces.mirroringK8SPrefix }}
            -k8s-namespace-mirroring-prefix={{ .Values.connectInject.consulNamespaces.mirroringK8SPrefix }} \
            {{- end }}
            {{- end }}
            {{- if .Values.global.acls.manageSystemACLs }}
            -consul-cross-namespace-acl-policy=cross-namespace-policy \
            {{- end }}
            {{- end }}
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        {{- include "consul.consulK8sConsulServerEnvVars" . | nindent 8 }}
        {{- if .Values.global.acls.manageSystemACLs }}
        - name: CONSUL_LOGIN_AUTH_METHOD
          {{- if and .Values.global.federation.enabled .Values.global.federation.primaryDatacenter }}
          value: {{ template "consul.fullname" . }}-k8s-component-auth-method-{{ .Values.global.datacenter }}
          {{- else }}
          value: {{ template "consul.fullname" . }}-k8s-component-auth-method
          {{- end }}
        - name: CONSUL_LOGIN_DATACENTER
          {{- if and .Values.global.federation.enabled .Values.global.federation.primaryDatacenter }}
          value: {{ .Values.global.federation.primaryDatacenter }}
          {{- else }}
          value: {{ .Values.global.datacenter }}
          {{- end }}
        - name: CONSUL_LOGIN_META
          value: "component=controller,pod=$(POD_NAME)"
        {{- end }}
        {{- if (and .Values.controller.aclToken.secretName .Values.controller.aclToken.secretKey) }}
        - name: CONSUL_ACL_TOKEN
          valueFrom:
            secretKeyRef:
              name: {{ .Values.controller.aclToken.secretName }}
              key: {{ .Values.controller.aclToken.secretKey }}
        {{- end }}
        image: {{ .Values.global.imageK8S }}
        name: controller
        ports:
        - containerPort: 9443
          name: webhook-server
          protocol: TCP
        {{- with .Values.controller.resources }}
        resources:
          {{- toYaml . | nindent 12 }}
        {{- end }}
        startupProbe:
          tcpSocket:
            port: 9443
          initialDelaySeconds: 30
          failureThreshold: 15
          periodSeconds: 2
          timeoutSeconds: 5
        readinessProbe:
          tcpSocket:
            port: 9443
          failureThreshold: 2
          initialDelaySeconds: 2
          successThreshold: 1
          timeoutSeconds: 5
        volumeMounts:
        {{- if not (and .Values.global.secretsBackend.vault.enabled .Values.global.secretsBackend.vault.controller.tlsCert.secretName) }}
        - mountPath: /tmp/controller-webhook/certs
          name: cert
          readOnly: true
        {{- end }}
        {{- if and .Values.global.tls.enabled (not (and .Values.externalServers.enabled .Values.externalServers.useSystemRoots))}}
        - name: consul-ca-cert
          mountPath: /consul/tls/ca
          readOnly: true
        {{- end }}
      terminationGracePeriodSeconds: 10
      volumes:
      {{- if not (and .Values.global.secretsBackend.vault.enabled .Values.global.secretsBackend.vault.controller.tlsCert.secretName) }}
      - name: cert
        secret:
          defaultMode: 420
          secretName: {{ template "consul.fullname" . }}-controller-webhook-cert
      {{- end }}
      {{- if .Values.global.tls.enabled }}
      {{- if not (and .Values.externalServers.enabled .Values.externalServers.useSystemRoots) }}
      - name: consul-ca-cert
        secret:
          {{- if .Values.global.tls.caCert.secretName }}
          secretName: {{ .Values.global.tls.caCert.secretName }}
          {{- else }}
          secretName: {{ template "consul.fullname" . }}-ca-cert
          {{- end }}
          items:
            - key: {{ default "tls.crt" .Values.global.tls.caCert.secretKey }}
              path: tls.crt
      {{- end }}
      {{- end }}
      serviceAccountName: {{ template "consul.fullname" . }}-controller
      {{- if .Values.controller.nodeSelector }}
      nodeSelector:
        {{ tpl .Values.controller.nodeSelector . | indent 8 | trim }}
      {{- end }}
      {{- if .Values.controller.affinity }}
      affinity:
        {{ tpl .Values.controller.affinity . | indent 8 | trim }}
      {{- end }}
      {{- if .Values.controller.tolerations }}
      tolerations:
        {{ tpl .Values.controller.tolerations . | indent 8 | trim }}
      {{- end }}
      {{- if .Values.controller.priorityClassName }}
      priorityClassName: {{ .Values.controller.priorityClassName | quote }}
      {{- end }}
{{- end }}
