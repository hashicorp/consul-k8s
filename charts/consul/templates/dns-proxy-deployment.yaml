{{- if .Values.dnsProxy.enabled }}# 
# The deployment for running the Connect sidecar injector
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "consul.fullname" . }}-dns-proxy
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ template "consul.name" . }}
    chart: {{ template "consul.chart" . }}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
    component: dns-proxy
    {{- if .Values.global.extraLabels }}
      {{- toYaml .Values.global.extraLabels | nindent 4 }}
    {{- end }}
spec:
  replicas: {{ .Values.dnsProxy.replicas }}
  selector:
    matchLabels:
      app: {{ template "consul.name" . }}
      chart: {{ template "consul.chart" . }}
      release: {{ .Release.Name }}
      component: dns-proxy
  template:
    metadata:
      labels:
        app: {{ template "consul.name" . }}
        chart: {{ template "consul.chart" . }}
        release: {{ .Release.Name }}
        component: dns-proxy
        {{- if .Values.global.extraLabels }}
          {{- toYaml .Values.global.extraLabels | nindent 8 }}
        {{- end }}
      annotations:
        "consul.hashicorp.com/connect-inject": "false"
        "consul.hashicorp.com/mesh-inject": "false"
    spec:
      serviceAccountName: {{ template "consul.fullname" . }}-dns-proxy
      containers:
        - name: sidecar-injector
          image: "{{ default .Values.global.imageConsulDataplane .Values.dnsProxy.image }}"
          {{ template "consul.imagePullPolicy" . }}
          ports:
            - containerPort: 8080
              name: webhook-server
              protocol: TCP
          {{- include "consul.restrictedSecurityContext" . | nindent 10 }}
          env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          args:
            - "-mode=dns-proxy"
            - "-addresses=consul-consul-server.consul.svc"
            - "-log-level=debug"
            - "-log-json=false"
            - "-tls-disabled"
            - "-startup-grace-period-seconds=0"
            - "-graceful-startup-path=/graceful_startup"
            - "-telemetry-prom-scrape-path=/metrics"
            - "-consul-dns-bind-port=8600"
          startupProbe:
            httpGet:
              path: /readyz/ready
              port: 9445
              scheme: HTTP
            initialDelaySeconds: 30
            failureThreshold: 15
            periodSeconds: 2
            timeoutSeconds: 5
          livenessProbe:
            httpGet:
              path: /readyz/ready
              port: 9445
              scheme: HTTP
            failureThreshold: 2
            initialDelaySeconds: 1
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /readyz/ready
              port: 9445
              scheme: HTTP
            failureThreshold: 2
            initialDelaySeconds: 2
            successThreshold: 1
            timeoutSeconds: 5
          volumeMounts:
          {{- if not (and .Values.global.secretsBackend.vault.enabled .Values.global.secretsBackend.vault.dnsProxy.tlsCert.secretName) }}
            - name: certs
              mountPath: /etc/dns-proxy/certs
              readOnly: true
          {{- end }}
          {{- if and .Values.global.tls.enabled (not (or (and .Values.externalServers.enabled .Values.externalServers.useSystemRoots) .Values.global.secretsBackend.vault.enabled))}}
            - name: consul-ca-cert
              mountPath: /consul/tls/ca
              readOnly: true
          {{- end }}
          {{- with .Values.dnsProxy.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
      volumes:
      {{- if not (and .Values.global.secretsBackend.vault.enabled .Values.global.secretsBackend.vault.dnsProxy.tlsCert.secretName) }}
        - name: certs
          secret:
            defaultMode: 420
            secretName: {{ template "consul.fullname" . }}-connect-inject-webhook-cert
      {{- end }}
      {{- if .Values.global.tls.enabled }}
      {{- if not (or (and .Values.externalServers.enabled .Values.externalServers.useSystemRoots) .Values.global.secretsBackend.vault.enabled) }}
        - name: consul-ca-cert
          secret:
            {{- if .Values.global.tls.caCert.secretName }}
              secretName: {{ .Values.global.tls.caCert.secretName }}
            {{- else }}
              secretName: {{ template "consul.fullname" . }}-ca-cert
            {{- end }}
              items:
                - key: {{ default "tls.crt" .Values.global.tls.caCert.secretKey }}
                  path: tls.crt
      {{- end }}
      {{- end }}
      {{- if .Values.dnsProxy.priorityClassName }}
      priorityClassName: {{ .Values.dnsProxy.priorityClassName | quote }}
      {{- end }}
      {{- if .Values.dnsProxy.nodeSelector }}
      nodeSelector:
        {{ tpl .Values.dnsProxy.nodeSelector . | indent 8 | trim }}
      {{- end }}
      {{- if .Values.dnsProxy.affinity }}
      affinity:
        {{ tpl .Values.dnsProxy.affinity . | indent 8 | trim }}
      {{- end }}
      {{- if .Values.dnsProxy.tolerations }}
      tolerations:
        {{ tpl .Values.dnsProxy.tolerations . | indent 8 | trim }}
      {{- end }}
{{- end }}
