{{- $newChecksum := include (print $.Template.BasePath "/cni-daemonset.yaml") . | sha256sum }}
{{- $shouldRun := false }}
{{- if .Release.IsUpgrade }}
  {{- $existingCNI := lookup "apps/v1" "DaemonSet" .Release.Namespace (printf "%s-cni" (include "consul.fullname" .)) }}
  {{- if $existingCNI }}
    {{- $currentChecksum := $existingCNI.spec | toJson | sha256sum }}
    {{- if eq $currentChecksum $newChecksum }}
      {{- $shouldRun = false }}
    {{- else }}
      {{- $shouldRun = true }}
    {{- end }}
  {{- end }}
{{- end }}
{{- if and .Values.connectInject.cni.enabled $shouldRun }}
apiVersion: batch/v1
kind: DaemonSet
metadata:
  name: cni-cleanup
  labels:
    app: {{ include "consul.name" . }}
  annotations:
    "helm.sh/hook": pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  selector:
    matchLabels:
      app: cni-cleanup
  template:
    spec:
      serviceAccountName: {{ include "consul.fullname" . }}-cni-preinstall
      tolerations:
        - operator: Exists
      containers:
        - name: token-setup
          image: curlimages/curl:latest  # Lighter image with curl
          securityContext:
            privileged: true
          env:
            - name: KUBERNETES_SERVICE_HOST
              value: "kubernetes.default.svc"
            - name: KUBERNETES_SERVICE_PORT
              value: "443"
          command:
            - /bin/sh
            - -c
            - |
              set -e
              # Get service account token from mounted token file
              TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)

              # Create token request using the API directly
              RESPONSE=$(curl -s -X POST \
                -H "Authorization: Bearer $TOKEN" \
                -H "Content-Type: application/json" \
                --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
                https://kubernetes.default.svc/apis/authentication.k8s.io/v1/tokenrequests \
                -d '{"spec":{"expirationSeconds":3600}}')

              # Extract the token from response
              NEW_TOKEN=$(echo "$RESPONSE" | grep -o '"token":"[^"]*' | cut -d'"' -f4)

              # Write token to host path
              echo "$NEW_TOKEN" > {{ .Values.connectInject.cni.cniNetDir }}/cni-host-token
          volumeMounts:
            - mountPath: {{ .Values.connectInject.cni.cniNetDir }}
              name: cni-net-dir
      volumes:
        - name: cni-net-dir
          hostPath:
            path: {{ .Values.connectInject.cni.cniNetDir }}
      nodeSelector:
        kubernetes.io/os: linux
{{- end }}