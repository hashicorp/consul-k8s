// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

//go:build enterprise

package meshinit

import (
	"context"
	"strconv"
	"testing"

	"github.com/hashicorp/consul/api"
	"github.com/hashicorp/consul/sdk/testutil"
	"github.com/mitchellh/cli"
	"github.com/stretchr/testify/require"

	"github.com/hashicorp/consul-k8s/control-plane/connect-inject/constants"
	"github.com/hashicorp/consul-k8s/control-plane/consul"
	"github.com/hashicorp/consul-k8s/control-plane/helper/test"
	"github.com/hashicorp/consul-k8s/control-plane/namespaces"
)

func TestRun_WithNamespaces(t *testing.T) {
	t.Parallel()
	cases := []struct {
		name            string
		consulNamespace string
		consulPartition string
	}{
		{
			name:            "default ns, default partition",
			consulNamespace: constants.DefaultConsulNS,
			consulPartition: constants.DefaultConsulPartition,
		},
		{
			name:            "non-default ns, default partition",
			consulNamespace: "bar",
			consulPartition: constants.DefaultConsulPartition,
		},
		{
			name:            "non-default ns, non-default partition",
			consulNamespace: "bar",
			consulPartition: "baz",
		},
	}
	for _, c := range cases {
		t.Run(c.name, func(t *testing.T) {

			var serverCfg *testutil.TestServerConfig
			testClient := test.TestServerWithMockConnMgrWatcher(t, func(c *testutil.TestServerConfig) {
				c.Experiments = []string{"resource-apis"}
				serverCfg = c
			})
			resourceClient, err := consul.NewResourceServiceClient(testClient.Watcher)
			require.NoError(t, err)

			_, err = EnsurePartitionExists(testClient.APIClient, c.consulPartition)
			require.NoError(t, err)

			partitionedCfg := testClient.Cfg.APIClientConfig
			partitionedCfg.Partition = c.consulPartition

			partitionedClient, err := api.NewClient(partitionedCfg)
			require.NoError(t, err)

			_, err = namespaces.EnsureExists(partitionedClient, c.consulNamespace, "")
			require.NoError(t, err)

			// Register Consul workload.
			loadResource(t, resourceClient, getWorkloadID(testPodName, c.consulNamespace, c.consulPartition), getWorkload(), nil)

			ui := cli.NewMockUi()
			cmd := Command{
				UI:                 ui,
				maxPollingAttempts: 5,
			}
			// We build the consul-addr because normally it's defined by the init container setting
			// CONSUL_HTTP_ADDR when it processes the command template.
			flags := []string{"-proxy-name", testPodName,
				"-addresses", "127.0.0.1",
				"-http-port", strconv.Itoa(serverCfg.Ports.HTTP),
				"-grpc-port", strconv.Itoa(serverCfg.Ports.GRPC),
				"-namespace", c.consulNamespace,
				"-partition", c.consulPartition,
			}

			// Run the command.
			code := cmd.Run(flags)
			require.Equal(t, 0, code, ui.ErrorWriter.String())
		})
	}
}

// EnsurePartitionExists ensures a Consul partition exists.
// Boolean return value indicates if the partition was created by this call.
// This is borrowed from namespaces.EnsureExists
func EnsurePartitionExists(client *api.Client, name string) (bool, error) {
	if name == constants.DefaultConsulPartition {
		return false, nil
	}
	// Check if the Consul namespace exists.
	partitionInfo, _, err := client.Partitions().Read(context.Background(), name, nil)
	if err != nil {
		return false, err
	}
	if partitionInfo != nil {
		return false, nil
	}

	consulPartition := api.Partition{
		Name:        name,
		Description: "Auto-generated by consul-k8s",
	}

	_, _, err = client.Partitions().Create(context.Background(), &consulPartition, nil)
	return true, err
}
