version: 2.1
orbs:
  slack: circleci/slack@3.4.2
executors:
  go:
    docker:
      - image: docker.mirror.hashicorp.services/circleci/golang:1.14
    environment:
      - TEST_RESULTS: /tmp/test-results

commands:
  install-prereqs:
    steps:
      - run:
          name: Install gotestsum, kind, kubectl, and helm
          command: |
            go get gotest.tools/gotestsum

            curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.11.0/kind-linux-amd64
            chmod +x ./kind
            sudo mv ./kind /usr/local/bin/kind

            curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin/kubectl

            curl https://baltocdn.com/helm/signing.asc | sudo apt-key add -
            sudo apt-get install apt-transport-https --yes
            echo "deb https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
            sudo apt-get update
            sudo apt-get install helm
  create-kind-clusters:
    parameters:
      version:
        type: string
    steps:
      - run:
          name: Create kind clusters
          command: |
            kind create cluster --name dc1 --image kindest/node:<< parameters.version >>
            kind create cluster --name dc2 --image kindest/node:<< parameters.version >>
  run-acceptance-tests:
    parameters:
      failfast:
        type: boolean
        default: false
      additional-flags:
        type: string
      consul-k8s-image:
        type: string
        default: "docker.mirror.hashicorp.services/hashicorpdev/consul-k8s:latest"
    steps:
      - when:
          condition: << parameters.failfast >>
          steps:
          - run:
              name: Run acceptance tests
              working_directory: test/acceptance/tests
              no_output_timeout: 2h
              command: |
                # We have to run the tests for each package separately so that we can
                # exit early if any test fails (-failfast only works within a single
                # package).
                exit_code=0
                pkgs=$(go list ./... | circleci tests split --split-by=timings --timings-type=classname)
                echo "Running $(echo $pkgs | wc -w) packages:"
                echo $pkgs
                for pkg in $pkgs
                do
                  if ! gotestsum --no-summary=all --jsonfile=jsonfile-${pkg////-} -- $pkg -p 1 -timeout 2h -failfast \
                        << parameters.additional-flags >> \
                        -enable-enterprise \
                        -enable-multi-cluster \
                        -debug-directory="$TEST_RESULTS/debug" \
                        -consul-k8s-image=<< parameters.consul-k8s-image >>
                  then
                    echo "Tests in ${pkg} failed, aborting early"
                    exit_code=1
                    break
                  fi
                done
                gotestsum --raw-command --junitfile "$TEST_RESULTS/gotestsum-report.xml" -- cat jsonfile*
                exit $exit_code

      - unless:
          condition: << parameters.failfast >>
          steps:
            - run:
                name: Run acceptance tests
                working_directory: test/acceptance/tests
                no_output_timeout: 2h
                command: |
                  pkgs=$(go list ./... | circleci tests split --split-by=timings --timings-type=classname)
                  echo "Running $pkgs"
                  gotestsum --junitfile "$TEST_RESULTS/gotestsum-report.xml" -- $pkgs -p 1 -timeout 2h -failfast \
                      << parameters.additional-flags >> \
                      -enable-multi-cluster \
                      -enable-enterprise \
                      -debug-directory="$TEST_RESULTS/debug" \
                      -consul-k8s-image=<< parameters.consul-k8s-image >>
jobs:
  unit-helm:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorpdev/consul-helm-test:0.9.1

    steps:
      - checkout

      - run:
          name: Run Unit Tests
          command: bats --jobs 4 ./test/unit

  go-fmt-and-vet-acceptance:
    executor: go
    steps:
      - checkout

      # Restore go module cache if there is one
      - restore_cache:
          keys:
            - consul-helm-acceptance-modcache-v1-{{ checksum "test/acceptance/go.mod" }}

      - run:
          name: go mod download
          working_directory: test/acceptance
          command: go mod download

      # Save go module cache if the go.mod file has changed
      - save_cache:
          key: consul-helm-acceptance-modcache-v1-{{ checksum "test/acceptance/go.mod" }}
          paths:
            - "/go/pkg/mod"

      # check go fmt output because it does not report non-zero when there are fmt changes
      - run:
          name: check go fmt
          command: |
            files=$(go fmt ./...)
            if [ -n "$files" ]; then
              echo "The following file(s) do not conform to go fmt:"
              echo "$files"
              exit 1
            fi

      - run:
          name: go vet
          working_directory: test/acceptance
          command: go vet ./...

  unit-acceptance-framework:
    executor: go
    steps:
      - checkout

      # Restore go module cache if there is one
      - restore_cache:
          keys:
            - consul-helm-acceptance-modcache-v1-{{ checksum "test/acceptance/go.mod" }}

      - run: mkdir -p $TEST_RESULTS

      - run:
          name: Run tests
          working_directory: test/acceptance/framework
          command: |
            gotestsum --junitfile $TEST_RESULTS/gotestsum-report.xml ./... -- -p 4

      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results

  acceptance:
    environment:
      - TEST_RESULTS: /tmp/test-results
    machine:
      image: ubuntu-2004:202010-01
    resource_class: xlarge
    parallelism: 6
    steps:
      - checkout
      - install-prereqs
      - create-kind-clusters:
          version: "v1.20.7"
      - restore_cache:
          keys:
            - consul-helm-modcache-v2-{{ checksum "test/acceptance/go.mod" }}
      - run:
          name: go mod download
          working_directory: test/acceptance
          command: go mod download
      - save_cache:
          key: consul-helm-modcache-v2-{{ checksum "test/acceptance/go.mod" }}
          paths:
            - ~/.go_workspace/pkg/mod
      - run: mkdir -p $TEST_RESULTS
      - run-acceptance-tests:
          failfast: true
          additional-flags: -use-kind -kubecontext="kind-dc1" -secondary-kubecontext="kind-dc2"
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results

  acceptance-tproxy:
    environment:
      - TEST_RESULTS: /tmp/test-results
    machine:
      image: ubuntu-2004:202010-01
    resource_class: xlarge
    parallelism: 6
    steps:
      - checkout
      - install-prereqs
      - create-kind-clusters:
          version: "v1.20.7"
      - restore_cache:
          keys:
            - consul-helm-modcache-v2-{{ checksum "test/acceptance/go.mod" }}
      - run:
          name: go mod download
          working_directory: test/acceptance
          command: go mod download
      - save_cache:
          key: consul-helm-modcache-v2-{{ checksum "test/acceptance/go.mod" }}
          paths:
            - ~/.go_workspace/pkg/mod
      - run: mkdir -p $TEST_RESULTS
      - run-acceptance-tests:
          failfast: true
          additional-flags: -use-kind -kubecontext="kind-dc1" -secondary-kubecontext="kind-dc2" -enable-transparent-proxy
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results

  acceptance-gke-1-17:
    environment:
      - TEST_RESULTS: /tmp/test-results
    docker:
      # This image is built from test/docker/Test.dockerfile
      - image: docker.mirror.hashicorp.services/hashicorpdev/consul-helm-test:0.9.0

    steps:
      - run:
          name: Exit if forked PR
          command: |
            if [ -n "$CIRCLE_PR_NUMBER" ]; then
                echo "Skipping acceptance tests for forked PRs; marking step successful."
                circleci step halt
            fi

      - checkout

      - run:
          name: terraform init & apply
          working_directory: test/terraform/gke
          command: |
            terraform init
            echo "${GOOGLE_CREDENTIALS}" | gcloud auth activate-service-account --key-file=-

            # On GKE, we're setting the build number instead of build URL because label values
            # cannot contain '/'.
            terraform apply \
              -var project=${CLOUDSDK_CORE_PROJECT} \
              -var init_cli=true \
              -var cluster_count=2 \
              -var labels="{\"build_number\": \"$CIRCLE_BUILD_NUM\"}" \
              -auto-approve

            primary_kubeconfig=$(terraform output -json | jq -r .kubeconfigs.value[0])
            secondary_kubeconfig=$(terraform output -json | jq -r .kubeconfigs.value[1])

            echo "export primary_kubeconfig=$primary_kubeconfig" >> $BASH_ENV
            echo "export secondary_kubeconfig=$secondary_kubeconfig" >> $BASH_ENV

      # Restore go module cache if there is one
      - restore_cache:
          keys:
            - consul-helm-acceptance-modcache-v1-{{ checksum "test/acceptance/go.mod" }}

      - run: mkdir -p $TEST_RESULTS

      - run-acceptance-tests:
          additional-flags: -kubeconfig="$primary_kubeconfig" -secondary-kubeconfig="$secondary_kubeconfig" -enable-pod-security-policies -enable-transparent-proxy

      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results

      - run:
          name: terraform destroy
          working_directory: test/terraform/gke
          command: |
            terraform destroy -var project=${CLOUDSDK_CORE_PROJECT} -auto-approve
          when: always

      - slack/status:
          fail_only: true
          failure_message: "GKE acceptance tests failed. Check the logs at: ${CIRCLE_BUILD_URL}"

  acceptance-aks-1-19:
    environment:
      - TEST_RESULTS: /tmp/test-results
    docker:
      # This image is built from test/docker/Test.dockerfile
      - image: docker.mirror.hashicorp.services/hashicorpdev/consul-helm-test:0.9.0

    steps:
      - checkout

      - run:
          name: terraform init & apply
          working_directory: test/terraform/aks
          command: |
            terraform init

            terraform apply \
              -var client_id="$ARM_CLIENT_ID" \
              -var client_secret="$ARM_CLIENT_SECRET" \
              -var cluster_count=2 \
              -var tags="{\"build_url\": \"$CIRCLE_BUILD_URL\"}" \
              -auto-approve

            primary_kubeconfig=$(terraform output -json | jq -r .kubeconfigs.value[0])
            secondary_kubeconfig=$(terraform output -json | jq -r .kubeconfigs.value[1])

            echo "export primary_kubeconfig=$primary_kubeconfig" >> $BASH_ENV
            echo "export secondary_kubeconfig=$secondary_kubeconfig" >> $BASH_ENV

      # Restore go module cache if there is one
      - restore_cache:
          keys:
            - consul-helm-acceptance-modcache-v1-{{ checksum "test/acceptance/go.mod" }}

      - run: mkdir -p $TEST_RESULTS

      - run-acceptance-tests:
          additional-flags: -kubeconfig="$primary_kubeconfig" -secondary-kubeconfig="$secondary_kubeconfig" -enable-transparent-proxy

      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results

      - run:
          name: terraform destroy
          working_directory: test/terraform/aks
          command: |
            terraform destroy -auto-approve
          when: always

      - slack/status:
          fail_only: true
          failure_message: "AKS acceptance tests failed. Check the logs at: ${CIRCLE_BUILD_URL}"

  acceptance-eks-1-18:
    environment:
      - TEST_RESULTS: /tmp/test-results
    docker:
      # This image is built from test/docker/Test.dockerfile
      - image: docker.mirror.hashicorp.services/hashicorpdev/consul-helm-test:0.9.0

    steps:
      - checkout

      - run:
          name: configure aws
          command: |
            aws configure --profile helm_user set aws_access_key_id "$AWS_ACCESS_KEY_ID"
            aws configure --profile helm_user set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"
            aws configure set role_arn "$AWS_ROLE_ARN"
            aws configure set source_profile helm_user

            echo "unset AWS_ACCESS_KEY_ID" >> $BASH_ENV
            echo "unset AWS_SECRET_ACCESS_KEY" >> $BASH_ENV

      - run:
          name: terraform init & apply
          working_directory: test/terraform/eks
          command: |
            terraform init

            terraform apply -var cluster_count=2 -var tags="{\"build_url\": \"$CIRCLE_BUILD_URL\"}" -auto-approve

            primary_kubeconfig=$(terraform output -json | jq -r .kubeconfigs.value[0])
            secondary_kubeconfig=$(terraform output -json | jq -r .kubeconfigs.value[1])

            echo "export primary_kubeconfig=$primary_kubeconfig" >> $BASH_ENV
            echo "export secondary_kubeconfig=$secondary_kubeconfig" >> $BASH_ENV

            # Change file permissions of the kubecofig files to avoid warnings by helm.
            # TODO: remove when https://github.com/terraform-aws-modules/terraform-aws-eks/pull/1114 is merged.
            chmod 600 "$primary_kubeconfig"
            chmod 600 "$secondary_kubeconfig"

      # Restore go module cache if there is one
      - restore_cache:
          keys:
            - consul-helm-acceptance-modcache-v1-{{ checksum "test/acceptance/go.mod" }}

      - run: mkdir -p $TEST_RESULTS

      - run-acceptance-tests:
          additional-flags: -kubeconfig="$primary_kubeconfig" -secondary-kubeconfig="$secondary_kubeconfig" -enable-transparent-proxy

      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results

      - run:
          name: terraform destroy
          working_directory: test/terraform/eks
          command: |
            terraform destroy -auto-approve
          when: always

      - slack/status:
          fail_only: true
          failure_message: "EKS acceptance tests failed. Check the logs at: ${CIRCLE_BUILD_URL}"

  acceptance-openshift:
    environment:
      TEST_RESULTS: /tmp/test-results
    parallelism: 3
    docker:
      # This image is built from test/docker/Test.dockerfile
      - image: docker.mirror.hashicorp.services/hashicorpdev/consul-helm-test:0.9.0

    steps:
      - checkout
      - run:
          name: terraform init & apply
          working_directory: test/terraform/openshift
          command: |
            terraform init

            az login --service-principal -u "$ARM_CLIENT_ID" -p "$ARM_CLIENT_SECRET" --tenant "$ARM_TENANT_ID" > /dev/null
            terraform apply \
              -var cluster_count=2 \
              -var tags="{\"build_url\": \"$CIRCLE_BUILD_URL\"}" \
              -auto-approve

            primary_kubeconfig=$(terraform output -json | jq -r .kubeconfigs.value[0])
            secondary_kubeconfig=$(terraform output -json | jq -r .kubeconfigs.value[1])

            echo "export primary_kubeconfig=$primary_kubeconfig" >> $BASH_ENV
            echo "export secondary_kubeconfig=$secondary_kubeconfig" >> $BASH_ENV

      # Restore go module cache if there is one
      - restore_cache:
          keys:
            - consul-helm-acceptance-modcache-v1-{{ checksum "test/acceptance/go.mod" }}

      - run: mkdir -p $TEST_RESULTS

      - run-acceptance-tests:
          additional-flags: -kubeconfig="$primary_kubeconfig" -secondary-kubeconfig="$secondary_kubeconfig" -enable-openshift -enable-transparent-proxy

      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
      - run:
          name: terraform destroy
          working_directory: test/terraform/openshift
          command: |
            terraform destroy -auto-approve
          when: always
      - slack/status:
          fail_only: true
          failure_message: "OpenShift acceptance tests failed. Check the logs at: ${CIRCLE_BUILD_URL}"

  acceptance-kind-1-21:
    environment:
      - TEST_RESULTS: /tmp/test-results
    machine:
      image: ubuntu-2004:202010-01
    resource_class: xlarge
    steps:
      - checkout
      - install-prereqs
      - create-kind-clusters:
          version: "v1.21.1"
      - restore_cache:
          keys:
            - consul-helm-modcache-v2-{{ checksum "test/acceptance/go.mod" }}
      - run:
          name: go mod download
          working_directory: test/acceptance
          command: go mod download
      - save_cache:
          key: consul-helm-modcache-v2-{{ checksum "test/acceptance/go.mod" }}
          paths:
            - ~/.go_workspace/pkg/mod
      - run: mkdir -p $TEST_RESULTS
      - run-acceptance-tests:
          additional-flags: -use-kind -kubecontext="kind-dc1" -secondary-kubecontext="kind-dc2" -enable-transparent-proxy
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
      - slack/status:
          fail_only: true
          failure_message: "Acceptance tests against Kind with Kubernetes v1.21 failed. Check the logs at: ${CIRCLE_BUILD_URL}"

  go-fmt-and-vet-helm-gen:
    executor: go
    steps:
      - checkout

      # Restore go module cache if there is one
      - restore_cache:
          keys:
            - consul-helm-helm-gen-modcache-v1-{{ checksum "hack/helm-reference-gen/go.mod" }}

      - run:
          name: go mod download
          working_directory: hack/helm-reference-gen
          command: go mod download

      # Save go module cache if the go.mod file has changed
      - save_cache:
          key: consul-helm-helm-gen-modcache-v1-{{ checksum "hack/helm-reference-gen/go.mod" }}
          paths:
            - "/go/pkg/mod"

      # check go fmt output because it does not report non-zero when there are fmt changes
      - run:
          name: check go fmt
          command: |
            files=$(go fmt ./...)
            if [ -n "$files" ]; then
              echo "The following file(s) do not conform to go fmt:"
              echo "$files"
              exit 1
            fi

      - run:
          name: go vet
          working_directory: hack/helm-reference-gen
          command: go vet ./...

  unit-helm-gen:
    executor: go
    steps:
      - checkout

      # Restore go module cache if there is one
      - restore_cache:
          keys:
            - consul-helm-helm-gen-modcache-v1-{{ checksum "hack/helm-reference-gen/go.mod" }}

      - run: mkdir -p $TEST_RESULTS

      - run:
          name: Run tests
          working_directory: hack/helm-reference-gen
          command: |
            gotestsum --junitfile $TEST_RESULTS/gotestsum-report.xml ./... -- -p 4

      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results

  test-helm-gen:
    executor: go
    steps:
      - checkout

      # Restore go module cache if there is one
      - restore_cache:
          keys:
            - consul-helm-helm-gen-modcache-v1-{{ checksum "hack/helm-reference-gen/go.mod" }}

      - run: mkdir -p $TEST_RESULTS

      - run:
          name: Run tests
          working_directory: hack/helm-reference-gen
          command: |
            go run ./... -validate

  update-helm-charts-index:
    docker:
      - image: docker.mirror.hashicorp.services/circleci/golang:latest
    steps:
      - checkout
      - run:
          name: verify Chart version matches tag version
          command: |
            GO111MODULE=on go get github.com/mikefarah/yq/v2
            git_tag=$(echo "${CIRCLE_TAG#v}")
            chart_tag=$(yq r Chart.yaml version)
            if [ "${git_tag}" != "${chart_tag}" ]; then
              echo "chart version (${chart_tag}) did not match git version (${git_tag})"
              exit 1
            fi
      - run:
          name: update helm-charts index
          command: |
            curl --show-error --silent --fail --user "${CIRCLE_TOKEN}:" \
                -X POST \
                -H 'Content-Type: application/json' \
                -H 'Accept: application/json' \
                -d "{\"branch\": \"master\",\"parameters\":{\"SOURCE_REPO\": \"${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}\",\"SOURCE_TAG\": \"${CIRCLE_TAG}\"}}" \
                "${CIRCLE_ENDPOINT}/${CIRCLE_PROJECT}/pipeline"
      - slack/status:
          fail_only: true
          failure_message: "Failed to trigger an update to the helm charts index. Check the logs at: ${CIRCLE_BUILD_URL}"

  cleanup-azure-resources:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorpdev/consul-helm-test:0.9.0
    steps:
      - run:
          name: cleanup leftover resources
          command: |
            az login --service-principal -u "$ARM_CLIENT_ID" -p "$ARM_CLIENT_SECRET" --tenant "$ARM_TENANT_ID" > /dev/null
            resource_groups=$(az group list -o json  | jq -r '.[] | select(.name | test("^consul-k8s-\\d+$")) | .name')
            for group in $resource_groups; do
              echo "Deleting $group resource group"
              az group delete -n $group --yes
            done

  cleanup-gcp-resources:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorpdev/consul-helm-test:0.9.0
    steps:
      - run:
          name: cleanup leftover resources
          command: |
            echo "${GOOGLE_CREDENTIALS}" | gcloud auth activate-service-account --key-file=-
            clusters=$(gcloud container clusters list --zone us-central1-a --project ${CLOUDSDK_CORE_PROJECT} --format json  | jq -r '.[] | select(.name | test("^consul-k8s-\\d+$")) | .name')
            for cluster in $clusters; do
              echo "Deleting $cluster GKE cluster"
              gcloud container clusters delete $cluster --zone us-central1-a --project ${CLOUDSDK_CORE_PROJECT} --quiet
            done

workflows:
  version: 2
  test:
    jobs:
      - go-fmt-and-vet-acceptance
      - go-fmt-and-vet-helm-gen
      - unit-acceptance-framework:
          requires:
            - go-fmt-and-vet-acceptance
      - unit-helm-gen:
          requires:
            - go-fmt-and-vet-helm-gen
      - test-helm-gen
      - unit-helm
      - acceptance:
          requires:
            - unit-helm
            - unit-acceptance-framework
      - acceptance-tproxy:
          requires:
            - unit-helm
            - unit-acceptance-framework
  nightly-acceptance-tests:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - cleanup-gcp-resources
      - cleanup-azure-resources
      - acceptance-openshift:
          requires:
          - cleanup-azure-resources
      - acceptance-gke-1-17:
          requires:
            - cleanup-gcp-resources
      - acceptance-eks-1-18
      - acceptance-aks-1-19:
          requires:
            - cleanup-azure-resources
      - acceptance-kind-1-21
  update-helm-charts-index:
    jobs:
      - update-helm-charts-index:
          context: helm-charts-trigger-consul
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
