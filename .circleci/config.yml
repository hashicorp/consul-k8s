# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: MPL-2.0

# Originally from consul-k8s
version: 2.1
orbs:
  slack: circleci/slack@3.4.2
# reusable 'executor' object for jobs
executors:
  go:
    docker:
      - image: docker.mirror.hashicorp.services/cimg/go:1.20.1
    environment:
      TEST_RESULTS: /tmp/test-results # path to where test results are saved

slack-channel: &slack-channel C0421KHNAV9 #feed-consul-k8s-ci channel ID
control-plane-path: &control-plane-path control-plane
cli-path: &cli-path cli
acceptance-mod-path: &acceptance-mod-path acceptance
acceptance-test-path: &acceptance-test-path acceptance/tests
acceptance-framework-path: &acceptance-framework-path acceptance/framework
helm-gen-path: &helm-gen-path hack/helm-reference-gen
gke-terraform-path: &gke-terraform-path charts/consul/test/terraform/gke
eks-terraform-path: &eks-terraform-path charts/consul/test/terraform/eks
aks-terraform-path: &aks-terraform-path charts/consul/test/terraform/aks
openshift-terraform-path: &openshift-terraform-path charts/consul/test/terraform/openshift
# This image is built from test/docker/Test.dockerfile
consul-helm-test-image: &consul-helm-test-image docker.mirror.hashicorp.services/hashicorpdev/consul-helm-test:0.15.0
consul-test-image: &consul-test-image hashicorppreview/consul-enterprise:1.15-dev

########################
# COMMANDS
########################
# Commands define a sequence of steps as a map to be executed and reused in jobs
commands:
  install-prereqs:
    steps:
      - run:
          name: Install go, gotestsum, kind, kubectl, and helm
          command: |
            wget https://golang.org/dl/go1.20.1.linux-amd64.tar.gz
            sudo rm -rf /usr/local/go && sudo tar -C /usr/local -xzf go1.20.1.linux-amd64.tar.gz
            rm go1.20.1.linux-amd64.tar.gz
            echo 'export PATH=$PATH:/usr/local/go/bin' >> $BASH_ENV

            wget https://github.com/gotestyourself/gotestsum/releases/download/v1.8.2/gotestsum_1.8.2_linux_amd64.tar.gz
            sudo tar -C /usr/local/bin -xzf gotestsum_1.8.2_linux_amd64.tar.gz
            rm gotestsum_1.8.2_linux_amd64.tar.gz

            curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.17.0/kind-linux-amd64
            chmod +x ./kind
            sudo mv ./kind /usr/local/bin/kind

            curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin/kubectl

            wget https://get.helm.sh/helm-v3.9.4-linux-amd64.tar.gz
            tar -zxvf helm-v3.9.4-linux-amd64.tar.gz
            sudo mv linux-amd64/helm /usr/local/bin/helm
  custom-checkout:
    description: |
      custom-checkout will perform a custom checkout procedure if provided with an alternative git reference,
      otherwise it will run the CircleCI defined checkout command. This is needed as the CircleCI defined checkout
      command does not support subsequent git actions after being called.
    parameters:
      git-ref:
        type: string
        default: ""
    steps:
      - when:
          condition: << parameters.git-ref >>
          steps:
            - run:
                name: Checkout code
                command: |
                  ssh-keyscan github.com >> ~/.ssh/known_hosts
                  if [ -e '/home/circleci/project/.git' ] ; then
                    echo 'Fetching into existing repository'
                    existing_repo='true'
                    cd '/home/circleci/project'
                    git remote set-url origin "$CIRCLE_REPOSITORY_URL" || true
                  else
                    echo 'Cloning git repository'
                    existing_repo='false'
                    mkdir -p '/home/circleci/project'
                    cd '/home/circleci/project'
                    git clone --no-checkout "$CIRCLE_REPOSITORY_URL" .
                  fi
                  
                  if [ "$existing_repo" = 'true' ] || [ 'false' = 'true' ]; then
                    echo 'Fetching from remote repository'
                    git fetch --force origin
                    git fetch --force --tags origin
                  fi
                  
                  echo 'Checking out branch/tag'
                  git checkout --force "<< parameters.git-ref >>"
      - unless:
          condition: << parameters.git-ref >>
          steps:
            - checkout
  create-kind-clusters:
    parameters:
      version:
        type: string
    steps:
      - run:
          name: Create kind clusters
          command: |
            kind create cluster --name dc1 --image kindest/node:<< parameters.version >>
            kind create cluster --name dc2 --image kindest/node:<< parameters.version >>
  create-kind-cni-clusters:
    parameters:
      version:
        type: string
    steps:
      - run:
          name: Create CNI kind clusters
          command: |
            kind create cluster --config=acceptance/framework/environment/cni-kind/kind.config --name dc1 --image kindest/node:<< parameters.version >>
            make kind-cni-calico
            kind create cluster --config=acceptance/framework/environment/cni-kind/kind.config --name dc2 --image kindest/node:<< parameters.version >>
            make kind-cni-calico
  build-cli:
    steps:
      - run:
          name: Build consul-k8s CLI
          working_directory: *cli-path
          command: |
            go build -o ./bin/consul-k8s
            sudo cp ./bin/consul-k8s /usr/local/go/bin/
            consul-k8s version

  run-acceptance-tests:
    description: |
      Runs the Kind acceptance tests using a provided consul-k8s image, or else attempts to use the image referenced by the 
      branch name and git reference of the current git commit
    parameters:
      failfast:
        type: boolean
        default: false
      additional-flags:
        type: string
      consul-k8s-image:
        type: string
        default: "docker.mirror.hashicorp.services/hashicorpdev/consul-k8s-control-plane:$(git rev-parse --short HEAD)"
      go-path:
        type: string
        default: "/home/circleci/.go_workspace"
    steps:
      - when:
          condition: << parameters.failfast >>
          steps:
            - run:
                name: Run acceptance tests
                working_directory: *acceptance-test-path
                no_output_timeout: 2h
                command: |
                  # Enterprise tests can't run on fork PRs because they require
                  # a secret.
                  if [ -z "$CIRCLE_PR_NUMBER" ]; then
                    ENABLE_ENTERPRISE=true
                  fi

                  # We have to run the tests for each package separately so that we can
                  # exit early if any test fails (-failfast only works within a single
                  # package).
                  exit_code=0
                  pkgs=$(go list ./... | circleci tests split --split-by=timings --timings-type=classname)
                  echo "Running $(echo $pkgs | wc -w) packages:"
                  echo $pkgs
                  for pkg in $pkgs
                  do
                    if ! gotestsum --format=testname --no-summary=all --jsonfile=jsonfile-${pkg////-} -- $pkg -p 1 -timeout 2h -failfast \
                          << parameters.additional-flags >> \
                          -enable-multi-cluster \
                          ${ENABLE_ENTERPRISE:+-enable-enterprise} \
                          -debug-directory="$TEST_RESULTS/debug" \
                          -consul-k8s-image=<< parameters.consul-k8s-image >>
                    then
                      echo "Tests in ${pkg} failed, aborting early"
                      exit_code=1
                      break
                    fi
                  done
                  gotestsum --format=testname --raw-command --junitfile "$TEST_RESULTS/gotestsum-report.xml" -- cat jsonfile*
                  exit $exit_code

      - unless:
          condition: << parameters.failfast >>
          steps:
            - run:
                name: Run acceptance tests
                working_directory: *acceptance-test-path
                no_output_timeout: 2h
                command: |
                  # Enterprise tests can't run on fork PRs because they require
                  # a secret.
                  if [ -z "$CIRCLE_PR_NUMBER" ]; then
                    ENABLE_ENTERPRISE=true
                  fi

                  pkgs=$(go list ./... | circleci tests split --split-by=timings --timings-type=classname)
                  echo "Running $pkgs"
                  gotestsum --format testname --junitfile "$TEST_RESULTS/gotestsum-report.xml" -- $pkgs -p 1 -timeout 2h -failfast \
                      << parameters.additional-flags >> \
                      ${ENABLE_ENTERPRISE:+-enable-enterprise} \
                      -enable-multi-cluster \
                      -debug-directory="$TEST_RESULTS/debug" \
                      -consul-k8s-image=<< parameters.consul-k8s-image >>

########################
# JOBS
########################
# Jobs are a collection of steps. These are used in the workflows to define
# what gets run in the pipeline
jobs:
  go-fmt-and-vet-control-plane:
    executor: go
    steps:
      - checkout

      # Restore go module cache if there is one
      - restore_cache:
          keys:
            - consul-k8s-modcache-v2-{{ checksum "control-plane/go.mod" }}

      - run:
          name: go mod download
          working_directory: *control-plane-path
          command: go mod download

      # Save go module cache if the go.mod file has changed
      - save_cache:
          key: consul-k8s-modcache-v2-{{ checksum "control-plane/go.mod" }}
          paths:
            - "/home/circleci/go/pkg/mod"

      # check go fmt output because it does not report non-zero when there are fmt changes
      - run:
          name: check go fmt
          working_directory: *control-plane-path
          command: |
            files=$(go fmt ./...)
            if [ -n "$files" ]; then
              echo "The following file(s) do not conform to go fmt:"
              echo "$files"
              exit 1
            fi
      - run: cd control-plane && go vet ./...

  lint-control-plane:
    executor: go
    steps:
      - checkout
      - run: go get -u github.com/hashicorp/lint-consul-retry && lint-consul-retry
      - run:
          name: run lint
          working_directory: *control-plane-path
          command: go run hack/lint-api-new-client/main.go

  test-control-plane:
    executor: go
    environment:
      TEST_RESULTS: /tmp/test-results
    parallelism: 1
    steps:
      - checkout
      - run: mkdir -p $TEST_RESULTS

      # Restore go module cache if there is one
      - restore_cache:
          keys:
            - consul-k8s-modcache-v2-{{ checksum "control-plane/go.mod" }}

      # run go tests with gotestsum
      - run:
          name: run go tests
          working_directory: *control-plane-path
          command: |
            # download and install the consul binary
            wget https://releases.hashicorp.com/consul/"${CONSUL_VERSION}"/consul_"${CONSUL_VERSION}"_linux_amd64.zip && \
                 unzip consul_"${CONSUL_VERSION}"_linux_amd64.zip -d /home/circleci/bin &&
                 rm consul_"${CONSUL_VERSION}"_linux_amd64.zip
            PACKAGE_NAMES=$(go list ./...)
            gotestsum --format testname --junitfile $TEST_RESULTS/gotestsum-report.xml -- -p 4 $PACKAGE_NAMES

      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results

  test-enterprise-control-plane:
    executor: go
    environment:
      TEST_RESULTS: /tmp/test-results
    parallelism: 1
    steps:
      - checkout
      - run: mkdir -p $TEST_RESULTS

      # Restore go module cache if there is one
      - restore_cache:
          keys:
            - consul-k8s-modcache-v2-{{ checksum "control-plane/go.mod" }}

      # run go tests with gotestsum
      - run:
          name: run enterprise go tests
          working_directory: *control-plane-path
          command: |
            # download and install the consul binary
            wget https://releases.hashicorp.com/consul/"${CONSUL_ENT_VERSION}"/consul_"${CONSUL_ENT_VERSION}"_linux_amd64.zip && \
                 unzip consul_"${CONSUL_ENT_VERSION}"_linux_amd64.zip -d /home/circleci/bin &&
                 rm consul_"${CONSUL_ENT_VERSION}"_linux_amd64.zip
            PACKAGE_NAMES=$(go list ./...)
            gotestsum --format testname --junitfile $TEST_RESULTS/gotestsum-report.xml -- -tags=enterprise -p 4 $PACKAGE_NAMES

      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results

  build-distro: # defines a parameterized job
    description: A job that will build the os/arch distro set by XC_OS and XC_ARCH
    parameters:
      OS:
        description: What OSes to build
        default: ""
        type: string
      ARCH:
        description: What architectures to build
        default: ""
        type: string
    executor: go
    environment:
      GOXPARALLEL: 2 # CircleCI containers are 2 CPU x 4GB RAM
    steps:
      - checkout
      # Restore go module cache if there is one
      - restore_cache:
          keys:
            - consul-k8s-modcache-v2-{{ checksum "control-plane/go.mod" }}
      - run:
          name: build local
          working_directory: *control-plane-path
          command: XC_OS="<< parameters.OS >>" XC_ARCH="<< parameters.ARCH >>" ./build-support/scripts/build-local.sh
      # persist to downstream job
      - persist_to_workspace:
          root: .
          paths:
            - control-plane/pkg/bin
            - control-plane/cni/pkg/bin
      # save dev build to CircleCI
      - store_artifacts:
          path: ./control-plane/pkg/bin
      - store_artifacts:
          path: ./control-plane/cni/pkg/bin

  # upload dev docker image
  dev-upload-docker:
    machine:
      image: ubuntu-2004:202010-01
    environment:
      DOCKER_CLI_EXPERIMENTAL: enabled
    steps:
      - checkout
      # get consul-k8s binary
      - attach_workspace:
          at: .
      - run: sudo apt-get update
      - run: sudo apt-get install -y qemu-user-static
      - run: docker buildx create --use
      - run:
          name: make ci.dev-docker
          working_directory: *control-plane-path
          command: make ci.dev-docker

  unit-cli:
    executor: go
    steps:
      - checkout

      # Restore go module cache if there is one
      - restore_cache:
          keys:
            - consul-k8s-cli-modcache-v2-{{ checksum "cli/go.mod" }}

      - run:
          name: go mod download
          working_directory: *cli-path
          command: go mod download

      # Save go module cache if the go.mod file has changed
      - save_cache:
          key: consul-k8s-cli-modcache-v2-{{ checksum "cli/go.mod" }}
          paths:
            - "/home/circleci/go/pkg/mod"

      - run: mkdir -p $TEST_RESULTS

      - run:
          name: Run tests
          working_directory: *cli-path
          command: |
            gotestsum --format testname --junitfile $TEST_RESULTS/gotestsum-report.xml ./... -- -p 4

      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results

  go-fmt-and-vet-acceptance:
    executor: go
    steps:
      - checkout

      # Restore go module cache if there is one
      - restore_cache:
          keys:
            - consul-helm-acceptance-modcache-v2-{{ checksum "acceptance/go.mod" }}

      - run:
          name: go mod download
          working_directory: *acceptance-mod-path
          command: go mod download

      # Save go module cache if the go.mod file has changed
      - save_cache:
          key: consul-helm-acceptance-modcache-v2-{{ checksum "acceptance/go.mod" }}
          paths:
            - "/home/circleci/go/pkg/mod"

      # check go fmt output because it does not report non-zero when there are fmt changes
      - run:
          name: check go fmt
          working_directory: *acceptance-mod-path
          command: |
            files=$(go fmt ./...)
            if [ -n "$files" ]; then
              echo "The following file(s) do not conform to go fmt:"
              echo "$files"
              exit 1
            fi

      - run:
          name: go vet
          working_directory: *acceptance-mod-path
          command: go vet ./...

  go-fmt-and-vet-helm-gen:
    executor: go
    steps:
      - checkout

      # Restore go module cache if there is one
      - restore_cache:
          keys:
            - consul-helm-helm-gen-modcache-v2-{{ checksum "charts/consul/hack/helm-reference-gen/go.mod" }}

      - run:
          name: go mod download
          working_directory: *helm-gen-path
          command: go mod download

      # Save go module cache if the go.mod file has changed
      - save_cache:
          key: consul-helm-helm-gen-modcache-v2-{{ checksum "charts/consul/hack/helm-reference-gen/go.mod" }}
          paths:
            - "/home/circleci/go/pkg/mod"

      # check go fmt output because it does not report non-zero when there are fmt changes
      - run:
          name: check go fmt
          working_directory: *helm-gen-path
          command: |
            files=$(go fmt ./...)
            if [ -n "$files" ]; then
              echo "The following file(s) do not conform to go fmt:"
              echo "$files"
              exit 1
            fi

      - run:
          name: go vet
          working_directory: *helm-gen-path
          command: go vet ./...

  unit-acceptance-framework:
    executor: go
    steps:
      - checkout

      # Restore go module cache if there is one
      - restore_cache:
          keys:
            - consul-helm-acceptance-modcache-v2-{{ checksum "acceptance/go.mod" }}

      - run: mkdir -p $TEST_RESULTS

      - run:
          name: Run tests
          working_directory: *acceptance-framework-path
          command: |
            gotestsum --format testname --junitfile $TEST_RESULTS/gotestsum-report.xml ./... -- -p 4

      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results

  unit-helm-gen:
    executor: go
    steps:
      - checkout

      # Restore go module cache if there is one
      - restore_cache:
          keys:
            - consul-helm-helm-gen-modcache-v2-{{ checksum "charts/consul/hack/helm-reference-gen/go.mod" }}

      - run: mkdir -p $TEST_RESULTS

      - run:
          name: Run tests
          working_directory: *helm-gen-path
          command: |
            gotestsum --format testname --junitfile $TEST_RESULTS/gotestsum-report.xml ./... -- -p 4

      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results

  validate-helm-gen:
    executor: go
    steps:
      - checkout

      # Restore go module cache if there is one
      - restore_cache:
          keys:
            - consul-helm-helm-gen-modcache-v2-{{ checksum "charts/consul/hack/helm-reference-gen/go.mod" }}

      - run: mkdir -p $TEST_RESULTS

      - run:
          name: Validate helm gen
          working_directory: *helm-gen-path
          command: |
            go run ./... -validate

  unit-test-helm-templates:
    docker:
      - image: *consul-helm-test-image

    steps:
      - checkout

      - run:
          name: Run Unit Tests
          working_directory: charts/consul
          command: bats --jobs 4 ./test/unit

  ###########################
  # KIND ACCEPTANCE TEST JOBS
  ###########################
  acceptance:
    environment:
      - TEST_RESULTS: /tmp/test-results
      - CONSUL_TEST_IMAGE: *consul-test-image
    machine:
      image: ubuntu-2004:202010-01
    resource_class: xlarge
    parallelism: 6
    steps:
      - checkout
      - install-prereqs
      - create-kind-clusters:
          version: "v1.26.0"
      - restore_cache:
          keys:
            - consul-helm-modcache-v2-{{ checksum "acceptance/go.mod" }}
      - run:
          name: go mod download
          working_directory: *acceptance-mod-path
          command: go mod download
      - save_cache:
          key: consul-helm-modcache-v2-{{ checksum "acceptance/go.mod" }}
          paths:
            - ~/.go_workspace/pkg/mod
      - build-cli
      - run: mkdir -p $TEST_RESULTS
      - run-acceptance-tests:
          failfast: true
          additional-flags: -use-kind -kubecontext="kind-dc1" -secondary-kubecontext="kind-dc2" -consul-image=$CONSUL_TEST_IMAGE
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results

  acceptance-tproxy:
    environment:
      - TEST_RESULTS: /tmp/test-results
      - CONSUL_TEST_IMAGE: *consul-test-image
    machine:
      image: ubuntu-2004:202010-01
    resource_class: xlarge
    parallelism: 6
    steps:
      - checkout
      - install-prereqs
      - create-kind-clusters:
          version: "v1.26.0"
      - restore_cache:
          keys:
            - consul-helm-modcache-v2-{{ checksum "acceptance/go.mod" }}
      - run:
          name: go mod download
          working_directory: *acceptance-mod-path
          command: go mod download
      - save_cache:
          key: consul-helm-modcache-v2-{{ checksum "acceptance/go.mod" }}
          paths:
            - ~/.go_workspace/pkg/mod
      - build-cli
      - run: mkdir -p $TEST_RESULTS
      - run-acceptance-tests:
          failfast: true
          additional-flags: -use-kind -kubecontext="kind-dc1" -secondary-kubecontext="kind-dc2" -enable-transparent-proxy -consul-image=$CONSUL_TEST_IMAGE
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results

  acceptance-tproxy-cni:
    environment:
      - TEST_RESULTS: /tmp/test-results
      - CONSUL_TEST_IMAGE: *consul-test-image
    machine:
      image: ubuntu-2004:202010-01
    resource_class: xlarge
    parallelism: 3
    steps:
      - checkout
      - install-prereqs
      - create-kind-cni-clusters:
          version: "v1.25.3"
      - restore_cache:
          keys:
            - consul-helm-modcache-v2-{{ checksum "acceptance/go.mod" }}
      - run:
          name: go mod download
          working_directory: *acceptance-mod-path
          command: go mod download
      - save_cache:
          key: consul-helm-modcache-v2-{{ checksum "acceptance/go.mod" }}
          paths:
            - ~/.go_workspace/pkg/mod
      - build-cli
      - run: mkdir -p $TEST_RESULTS
      - run-acceptance-tests:
          failfast: true
          additional-flags: -use-kind -kubecontext="kind-dc1" -secondary-kubecontext="kind-dc2" -enable-transparent-proxy -enable-cni -consul-image=$CONSUL_TEST_IMAGE
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results

  ##############################
  # CLEANUP CLOUD RESOURCES JOBS
  ##############################
  cleanup-gcp-resources:
    docker:
      - image: *consul-helm-test-image
    steps:
      - run:
          name: cleanup leftover resources
          command: |
            echo "${GOOGLE_CREDENTIALS}" | gcloud auth activate-service-account --key-file=-
            clusters=$(gcloud container clusters list --zone us-central1-a --project ${CLOUDSDK_CORE_PROJECT} --format json  | jq -r '.[] | select(.name | test("^consul-k8s-\\d+$")) | .name')
            for cluster in $clusters; do
              echo "Deleting $cluster GKE cluster"
              gcloud container clusters delete $cluster --zone us-central1-a --project ${CLOUDSDK_CORE_PROJECT} --quiet
            done
      - slack/status:
          channel: *slack-channel
          fail_only: true
          failure_message: "GKE cleanup failed"

  cleanup-azure-resources:
    docker:
      - image: *consul-helm-test-image
    steps:
      - run:
          name: cleanup leftover resources
          command: |
            az login --service-principal -u "$ARM_CLIENT_ID" -p "$ARM_CLIENT_SECRET" --tenant "$ARM_TENANT_ID" > /dev/null
            resource_groups=$(az group list -o json  | jq -r '.[] | select(.name | test("^consul-k8s-\\d+$")) | .name')
            for group in $resource_groups; do
              echo "Deleting $group resource group"
              az group delete -n $group --yes
            done
      - slack/status:
          channel: *slack-channel
          fail_only: true
          failure_message: "AKS cleanup failed"

  cleanup-eks-resources:
    docker:
      - image: *consul-helm-test-image
    steps:
      - checkout
      - run:
          name: cleanup eks resources
          command: |
            # Assume the role and set environment variables.
            aws sts assume-role --role-arn "$AWS_ROLE_ARN" --role-session-name "consul-helm-$CIRCLE_BUILD_NUM" --duration-seconds 10800 > assume-role.json
            export AWS_ACCESS_KEY_ID="$(jq -r .Credentials.AccessKeyId assume-role.json)"
            export AWS_SECRET_ACCESS_KEY="$(jq -r .Credentials.SecretAccessKey assume-role.json)"
            export AWS_SESSION_TOKEN="$(jq -r .Credentials.SessionToken assume-role.json)"

            make ci.aws-acceptance-test-cleanup
      - slack/status:
          channel: *slack-channel
          fail_only: true
          failure_message: "EKS cleanup failed"

  #############################
  # CLOUD ACCEPTANCE TEST JOBS
  #############################
  acceptance-gke-1-25:
    parallelism: 2
    environment:
      - TEST_RESULTS: /tmp/test-results
      - USE_GKE_GCLOUD_AUTH_PLUGIN: true
      - CONSUL_TEST_IMAGE: *consul-test-image
    docker:
      - image: *consul-helm-test-image

    steps:
      - run:
          name: Exit if forked PR
          command: |
            if [ -n "$CIRCLE_PR_NUMBER" ]; then
                echo "Skipping acceptance tests for forked PRs; marking step successful."
                circleci step halt
            fi

      - checkout

      - build-cli
      - run:
          name: terraform init & apply
          working_directory: *gke-terraform-path
          command: |
            terraform init
            echo "${GOOGLE_CREDENTIALS}" | gcloud auth activate-service-account --key-file=-

            # On GKE, we're setting the build number instead of build URL because label values
            # cannot contain '/'.
            terraform apply \
              -var project=${CLOUDSDK_CORE_PROJECT} \
              -var init_cli=true \
              -var cluster_count=2 \
              -var labels="{\"build_number\": \"$CIRCLE_BUILD_NUM\"}" \
              -auto-approve

            primary_kubeconfig=$(terraform output -json | jq -r .kubeconfigs.value[0])
            secondary_kubeconfig=$(terraform output -json | jq -r .kubeconfigs.value[1])

            echo "export primary_kubeconfig=$primary_kubeconfig" >> $BASH_ENV
            echo "export secondary_kubeconfig=$secondary_kubeconfig" >> $BASH_ENV

      # Restore go module cache if there is one
      - restore_cache:
          keys:
            - consul-helm-acceptance-modcache-v2-{{ checksum "acceptance/go.mod" }}

      - run: mkdir -p $TEST_RESULTS

      - run-acceptance-tests:
          additional-flags: -kubeconfig="$primary_kubeconfig" -secondary-kubeconfig="$secondary_kubeconfig" -enable-transparent-proxy -consul-image=$CONSUL_TEST_IMAGE

      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results

      - run:
          name: terraform destroy
          working_directory: *gke-terraform-path
          command: |
            terraform destroy -var project=${CLOUDSDK_CORE_PROJECT} -auto-approve
          when: always

      - slack/status:
          channel: *slack-channel
          fail_only: true
          failure_message: "GKE acceptance tests failed. Check the logs at: ${CIRCLE_BUILD_URL}"

  acceptance-gke-cni-1-25:
    parallelism: 2
    environment:
      - TEST_RESULTS: /tmp/test-results
      - USE_GKE_GCLOUD_AUTH_PLUGIN: true
      - CONSUL_TEST_IMAGE: *consul-test-image
    docker:
      - image: *consul-helm-test-image

    steps:
      - run:
          name: Exit if forked PR
          command: |
            if [ -n "$CIRCLE_PR_NUMBER" ]; then
                echo "Skipping acceptance tests for forked PRs; marking step successful."
                circleci step halt
            fi

      - checkout

      - build-cli
      - run:
          name: terraform init & apply
          working_directory: *gke-terraform-path
          command: |
            terraform init
            echo "${GOOGLE_CREDENTIALS}" | gcloud auth activate-service-account --key-file=-

            # On GKE, we're setting the build number instead of build URL because label values
            # cannot contain '/'.
            terraform apply \
              -var project=${CLOUDSDK_CORE_PROJECT} \
              -var init_cli=true \
              -var cluster_count=2 \
              -var labels="{\"build_number\": \"$CIRCLE_BUILD_NUM\"}" \
              -auto-approve

            primary_kubeconfig=$(terraform output -json | jq -r .kubeconfigs.value[0])
            secondary_kubeconfig=$(terraform output -json | jq -r .kubeconfigs.value[1])

            echo "export primary_kubeconfig=$primary_kubeconfig" >> $BASH_ENV
            echo "export secondary_kubeconfig=$secondary_kubeconfig" >> $BASH_ENV

      # Restore go module cache if there is one
      - restore_cache:
          keys:
            - consul-helm-acceptance-modcache-v2-{{ checksum "acceptance/go.mod" }}

      - run: mkdir -p $TEST_RESULTS

      - run-acceptance-tests:
          additional-flags: -use-gke -kubeconfig="$primary_kubeconfig" -secondary-kubeconfig="$secondary_kubeconfig" -enable-transparent-proxy -enable-cni -consul-image=$CONSUL_TEST_IMAGE

      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results

      - run:
          name: terraform destroy
          working_directory: *gke-terraform-path
          command: |
            terraform destroy -var project=${CLOUDSDK_CORE_PROJECT} -auto-approve
          when: always

      - slack/status:
          channel: *slack-channel
          fail_only: true
          failure_message: "GKE CNI acceptance tests failed. Check the logs at: ${CIRCLE_BUILD_URL}"

  acceptance-aks-1-24:
    parallelism: 3
    environment:
      - TEST_RESULTS: /tmp/test-results
      - CONSUL_TEST_IMAGE: *consul-test-image
    docker:
      - image: *consul-helm-test-image

    steps:
      - checkout

      - build-cli
      - run:
          name: terraform init & apply
          working_directory: *aks-terraform-path
          command: |
            terraform init

            terraform apply \
              -var client_id="$ARM_CLIENT_ID" \
              -var client_secret="$ARM_CLIENT_SECRET" \
              -var cluster_count=2 \
              -var tags="{\"build_url\": \"$CIRCLE_BUILD_URL\"}" \
              -auto-approve

            primary_kubeconfig=$(terraform output -json | jq -r .kubeconfigs.value[0])
            secondary_kubeconfig=$(terraform output -json | jq -r .kubeconfigs.value[1])

            echo "export primary_kubeconfig=$primary_kubeconfig" >> $BASH_ENV
            echo "export secondary_kubeconfig=$secondary_kubeconfig" >> $BASH_ENV

      # Restore go module cache if there is one
      - restore_cache:
          keys:
            - consul-helm-acceptance-modcache-v2-{{ checksum "acceptance/go.mod" }}

      - run: mkdir -p $TEST_RESULTS

      - run-acceptance-tests:
          additional-flags: -use-aks -kubeconfig="$primary_kubeconfig" -secondary-kubeconfig="$secondary_kubeconfig" -enable-transparent-proxy -consul-image=$CONSUL_TEST_IMAGE

      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results

      - run:
          name: terraform destroy
          working_directory: *aks-terraform-path
          command: |
            terraform destroy -auto-approve
          when: always

      - slack/status:
          channel: *slack-channel
          fail_only: true
          failure_message: "AKS acceptance tests failed. Check the logs at: ${CIRCLE_BUILD_URL}"

  acceptance-aks-cni-1-24:
    parallelism: 3
    environment:
      - TEST_RESULTS: /tmp/test-results
      - CONSUL_TEST_IMAGE: *consul-test-image
    docker:
      - image: *consul-helm-test-image

    steps:
      - checkout

      - build-cli
      - run:
          name: terraform init & apply
          working_directory: *aks-terraform-path
          command: |
            terraform init

            terraform apply \
              -var client_id="$ARM_CLIENT_ID" \
              -var client_secret="$ARM_CLIENT_SECRET" \
              -var cluster_count=2 \
              -var tags="{\"build_url\": \"$CIRCLE_BUILD_URL\"}" \
              -auto-approve

            primary_kubeconfig=$(terraform output -json | jq -r .kubeconfigs.value[0])
            secondary_kubeconfig=$(terraform output -json | jq -r .kubeconfigs.value[1])

            echo "export primary_kubeconfig=$primary_kubeconfig" >> $BASH_ENV
            echo "export secondary_kubeconfig=$secondary_kubeconfig" >> $BASH_ENV

      # Restore go module cache if there is one
      - restore_cache:
          keys:
            - consul-helm-acceptance-modcache-v2-{{ checksum "acceptance/go.mod" }}

      - run: mkdir -p $TEST_RESULTS

      - run-acceptance-tests:
          additional-flags: -use-aks -kubeconfig="$primary_kubeconfig" -secondary-kubeconfig="$secondary_kubeconfig" -enable-transparent-proxy -enable-cni -consul-image=$CONSUL_TEST_IMAGE

      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results

      - run:
          name: terraform destroy
          working_directory: *aks-terraform-path
          command: |
            terraform destroy -auto-approve
          when: always
      - slack/status:
          channel: *slack-channel
          fail_only: true
          failure_message: "AKS CNI acceptance tests failed. Check the logs at: ${CIRCLE_BUILD_URL}"

  acceptance-eks-1-23:
    parallelism: 3
    environment:
      - TEST_RESULTS: /tmp/test-results
      - CONSUL_TEST_IMAGE: *consul-test-image
    docker:
      - image: *consul-helm-test-image

    steps:
      - checkout

      - build-cli
      - run:
          name: configure aws
          command: |
            aws configure --profile helm_user set aws_access_key_id "$AWS_ACCESS_KEY_ID"
            aws configure --profile helm_user set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"
            aws configure set role_arn "$AWS_ROLE_ARN"
            aws configure set source_profile helm_user

            echo "unset AWS_ACCESS_KEY_ID" >> $BASH_ENV
            echo "unset AWS_SECRET_ACCESS_KEY" >> $BASH_ENV

      - run:
          name: terraform init & apply
          working_directory: *eks-terraform-path
          command: |
            terraform init

            terraform apply -var cluster_count=2 -var tags="{\"build_url\": \"$CIRCLE_BUILD_URL\"}" -auto-approve

            primary_kubeconfig=$(terraform output -json | jq -r .kubeconfigs.value[0])
            secondary_kubeconfig=$(terraform output -json | jq -r .kubeconfigs.value[1])

            echo "export primary_kubeconfig=$primary_kubeconfig" >> $BASH_ENV
            echo "export secondary_kubeconfig=$secondary_kubeconfig" >> $BASH_ENV

      # Restore go module cache if there is one
      - restore_cache:
          keys:
            - consul-helm-acceptance-modcache-v2-{{ checksum "acceptance/go.mod" }}

      - run: mkdir -p $TEST_RESULTS

      - run-acceptance-tests:
          additional-flags: -kubeconfig="$primary_kubeconfig" -secondary-kubeconfig="$secondary_kubeconfig" -enable-transparent-proxy -consul-image=$CONSUL_TEST_IMAGE

      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results

      - run:
          name: terraform destroy
          working_directory: *eks-terraform-path
          command: |
            terraform destroy -var cluster_count=2 -auto-approve
          when: always

      - slack/status:
          channel: *slack-channel
          fail_only: true
          failure_message: "EKS acceptance tests failed. Check the logs at: ${CIRCLE_BUILD_URL}"

  acceptance-eks-cni-1-23:
    parallelism: 3
    environment:
      - TEST_RESULTS: /tmp/test-results
      - CONSUL_TEST_IMAGE: *consul-test-image
    docker:
      - image: *consul-helm-test-image

    steps:
      - checkout

      - build-cli
      - run:
          name: configure aws
          command: |
            aws configure --profile helm_user set aws_access_key_id "$AWS_ACCESS_KEY_ID"
            aws configure --profile helm_user set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"
            aws configure set role_arn "$AWS_ROLE_ARN"
            aws configure set source_profile helm_user

            echo "unset AWS_ACCESS_KEY_ID" >> $BASH_ENV
            echo "unset AWS_SECRET_ACCESS_KEY" >> $BASH_ENV

      - run:
          name: terraform init & apply
          working_directory: *eks-terraform-path
          command: |
            terraform init

            terraform apply -var cluster_count=2 -var tags="{\"build_url\": \"$CIRCLE_BUILD_URL\"}" -auto-approve

            primary_kubeconfig=$(terraform output -json | jq -r .kubeconfigs.value[0])
            secondary_kubeconfig=$(terraform output -json | jq -r .kubeconfigs.value[1])

            echo "export primary_kubeconfig=$primary_kubeconfig" >> $BASH_ENV
            echo "export secondary_kubeconfig=$secondary_kubeconfig" >> $BASH_ENV

      # Restore go module cache if there is one
      - restore_cache:
          keys:
            - consul-helm-acceptance-modcache-v2-{{ checksum "acceptance/go.mod" }}

      - run: mkdir -p $TEST_RESULTS

      - run-acceptance-tests:
          additional-flags: -kubeconfig="$primary_kubeconfig" -secondary-kubeconfig="$secondary_kubeconfig" -enable-transparent-proxy -enable-cni -consul-image=$CONSUL_TEST_IMAGE

      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results

      - run:
          name: terraform destroy
          working_directory: *eks-terraform-path
          command: |
            terraform destroy -var cluster_count=2 -auto-approve
          when: always

      - slack/status:
          channel: *slack-channel
          fail_only: true
          failure_message: "EKS CNI acceptance tests failed. Check the logs at: ${CIRCLE_BUILD_URL}"

  acceptance-openshift:
    environment:
      TEST_RESULTS: /tmp/test-results
      CONSUL_TEST_IMAGE: *consul-test-image
    parallelism: 1
    docker:
      - image: *consul-helm-test-image

    steps:
      - checkout
      - build-cli
      - run:
          name: terraform init & apply
          working_directory: *openshift-terraform-path
          command: |
            terraform init
            az login --service-principal -u "$ARM_CLIENT_ID" -p "$ARM_CLIENT_SECRET" --tenant "$ARM_TENANT_ID" > /dev/null
            terraform apply \
              -var cluster_count=2 \
              -var tags="{\"build_url\": \"$CIRCLE_BUILD_URL\"}" \
              -auto-approve

            primary_kubeconfig=$(terraform output -json | jq -r .kubeconfigs.value[0])
            secondary_kubeconfig=$(terraform output -json | jq -r .kubeconfigs.value[1])

            echo "export primary_kubeconfig=$primary_kubeconfig" >> $BASH_ENV
            echo "export secondary_kubeconfig=$secondary_kubeconfig" >> $BASH_ENV

      # Restore go module cache if there is one
      - restore_cache:
          keys:
            - consul-helm-acceptance-modcache-v2-{{ checksum "acceptance/go.mod" }}

      - run: mkdir -p $TEST_RESULTS

      - run-acceptance-tests:
          additional-flags: -kubeconfig="$primary_kubeconfig" -secondary-kubeconfig="$secondary_kubeconfig" -enable-openshift -enable-transparent-proxy -consul-image=$CONSUL_TEST_IMAGE

      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results

      - run:
          name: terraform destroy
          working_directory: *openshift-terraform-path
          command: |
            terraform destroy -auto-approve
          when: always

      - slack/status:
          channel: *slack-channel
          fail_only: true
          failure_message: "OpenShift acceptance tests failed. Check the logs at: ${CIRCLE_BUILD_URL}"

  acceptance-kind-1-23-consul-compat-nightly-1-12:
    environment:
      - TEST_RESULTS: /tmp/test-results
      - CONSUL_IMAGE: "docker.mirror.hashicorp.services/hashicorppreview/consul-enterprise:1.12-dev"
      - ENVOY_IMAGE: "envoyproxy/envoy:v1.22.2"
      - HELM_CHART_VERSION: "0.49.0"
      - CONSUL_K8S_IMAGE: "docker.mirror.hashicorp.services/hashicorp/consul-k8s-control-plane:0.49.0"
    machine:
      image: ubuntu-2004:202010-01
    resource_class: xlarge
    steps:
      - custom-checkout:
          git-ref: "v$HELM_CHART_VERSION"
      - install-prereqs
      - create-kind-clusters:
          version: "v1.23.0"
      - restore_cache:
          keys:
            - consul-helm-modcache-v2-{{ checksum "acceptance/go.mod" }}
      - run:
          name: go mod download
          working_directory: *acceptance-mod-path
          command: go mod download
      - save_cache:
          key: consul-helm-modcache-v2-{{ checksum "acceptance/go.mod" }}
          paths:
            - ~/.go_workspace/pkg/mod
      - build-cli
      - run: mkdir -p $TEST_RESULTS
      - run-acceptance-tests:
          consul-k8s-image: $CONSUL_K8S_IMAGE
          additional-flags: -use-kind -kubecontext="kind-dc1" -secondary-kubecontext="kind-dc2" -consul-image=$CONSUL_IMAGE -consul-version="1.12" -envoy-image=$ENVOY_IMAGE -helm-chart-version=$HELM_CHART_VERSION -enable-transparent-proxy
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
      - slack/status:
          channel: *slack-channel
          fail_only: true
          failure_message: "Acceptance tests against Kind with Kubernetes v1.25 with Consul 1.12 nightly failed. Check the logs at: ${CIRCLE_BUILD_URL}"

  acceptance-kind-1-23-consul-compat-nightly-1-13:
    environment:
      - TEST_RESULTS: /tmp/test-results
      - CONSUL_IMAGE: "docker.mirror.hashicorp.services/hashicorppreview/consul-enterprise:1.13-dev"
      - ENVOY_IMAGE: "envoyproxy/envoy:v1.23.1"
      - CONSUL_K8S_IMAGE: "docker.mirror.hashicorp.services/hashicorp/consul-k8s-control-plane:0.49.0"
      - HELM_CHART_VERSION: "0.49.0"
    machine:
      image: ubuntu-2004:202010-01
    resource_class: xlarge
    steps:
      - custom-checkout:
          git-ref: "v$HELM_CHART_VERSION"
      - install-prereqs
      - create-kind-clusters:
          version: "v1.23.0"
      - restore_cache:
          keys:
            - consul-helm-modcache-v2-{{ checksum "acceptance/go.mod" }}
      - run:
          name: go mod download
          working_directory: *acceptance-mod-path
          command: go mod download
      - save_cache:
          key: consul-helm-modcache-v2-{{ checksum "acceptance/go.mod" }}
          paths:
            - ~/.go_workspace/pkg/mod
      - build-cli
      - run: mkdir -p $TEST_RESULTS
      - run-acceptance-tests:
          consul-k8s-image: $CONSUL_K8S_IMAGE
          additional-flags: -use-kind -kubecontext="kind-dc1" -secondary-kubecontext="kind-dc2" -consul-image=$CONSUL_IMAGE -consul-version="1.13" -envoy-image=$ENVOY_IMAGE -helm-chart-version=$HELM_CHART_VERSION -enable-transparent-proxy
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
      - slack/status:
          channel: *slack-channel
          fail_only: true
          failure_message: "Acceptance tests against Kind with Kubernetes v1.25 with Consul 1.13 nightly failed. Check the logs at: ${CIRCLE_BUILD_URL}"

########################
# WORKFLOWS
########################
# Workflows are a set of rules for defining a collection of jobs and their run order.
# This is where the pipeline tests and builds are constructed and triggers for running these tests
# are defined
workflows:
  version: 2
  test-and-build:
    jobs:
      # Build this one control-plane binary so that acceptance and acceptance-tproxy will run
      # The rest of these CircleCI jobs have been migrated to GitHub Actions. We need to wait until
      # there is support for a larger pool of runners before the acceptance tests can
      # be moved
      # Run acceptance tests using the docker image built for the control plane for this particular
      # branch
      # This is run on every PR
      - build-distro:
          OS: "linux"
          ARCH: "amd64 arm64"
          name: build-distros-linux
      - dev-upload-docker:
          context: consul-ci
          requires:
            - build-distros-linux
      - acceptance:
          context: consul-ci
          requires:
            - dev-upload-docker
      - acceptance-tproxy-cni:
          context: consul-ci
          requires:
            - dev-upload-docker
      - acceptance-tproxy:
          context: consul-ci
          requires:
            - dev-upload-docker


  nightly-cleanup:
    triggers:
      - schedule:
          cron: "0 12 * * *" # Run at 12 pm UTC (5 am PST)
          filters:
            branches:
              only:
                - main
    jobs:
      - cleanup-gcp-resources
      - cleanup-azure-resources
      - cleanup-eks-resources

  nightly-acceptance-tests-release:
    description: |
      Tests which run on a release branch nightly. These exist separate from the main
      acceptance tests so that they can run at their own cadence, but 
      contains the same sequence of jobs.
    triggers:
      - schedule:
          cron: "0 0 * * *" # Run at 12 am UTC (5 pm PST)
          filters:
            branches:
              only:
                - release/0.49.x
                - release/1.0.x
                - release/1.1.x
    jobs:
      - build-distro:
          OS: "linux"
          ARCH: "amd64 arm64"
          name: build-distros-linux
      - dev-upload-docker:
          requires:
            - build-distros-linux
      # Disable until we can use UBI images.
      # - acceptance-openshift
      - acceptance-gke-1-25:
          requires:
            - dev-upload-docker
      - acceptance-gke-cni-1-25:
          requires:
            - acceptance-gke-1-25
      - acceptance-tproxy:
          requires:
            - dev-upload-docker

  nightly-acceptance-tests-main:
    description: |
      Tests which run on the main branch nightly. These exist separate from the release
      acceptance tests so that they can run at their own cadence, but 
      contains the same sequence of jobs.
    triggers:
      - schedule:
          cron: "0 0 * * *" # Run at 12 am UTC (5 pm PST)
          filters:
            branches:
              only:
                - main
    jobs:
      - build-distro:
          OS: "linux"
          ARCH: "amd64 arm64"
          name: build-distros-linux
      - dev-upload-docker:
          requires:
            - build-distros-linux
      # Disable until we can use UBI images.
      # - acceptance-openshift
      - acceptance-gke-1-25:
          requires:
            - dev-upload-docker
      - acceptance-gke-cni-1-25:
          requires:
            - acceptance-gke-1-25
      - acceptance-eks-1-23:
          requires:
            - dev-upload-docker
      - acceptance-eks-cni-1-23:
          requires:
            - acceptance-eks-1-23
      - acceptance-aks-1-24:
          requires:
            - dev-upload-docker
      - acceptance-aks-cni-1-24:
          requires:
            - acceptance-aks-1-24
      - acceptance-tproxy:
          requires:
            - dev-upload-docker
