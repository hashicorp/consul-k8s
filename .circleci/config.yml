# Originally from consul-k8s
version: 2.1
orbs:
  slack: circleci/slack@3.4.2
# reusable 'executor' object for jobs
executors:
  go:
    docker:
      - image: docker.mirror.hashicorp.services/cimg/go:1.17.5
    environment:
      TEST_RESULTS: /tmp/test-results # path to where test results are saved
      CONSUL_VERSION: 1.11.2 # Consul's OSS version to use in tests
      CONSUL_ENT_VERSION: 1.11.2+ent # Consul's enterprise version to use in tests

control-plane-path: &control-plane-path control-plane
cli-path: &cli-path cli
acceptance-mod-path: &acceptance-mod-path acceptance
acceptance-test-path: &acceptance-test-path acceptance/tests
acceptance-framework-path: &acceptance-framework-path acceptance/framework
charts-consul-path: &charts-consul-path charts/consul
helm-gen-path: &helm-gen-path hack/helm-reference-gen
gke-terraform-path: &gke-terraform-path charts/consul/test/terraform/gke
eks-terraform-path: &eks-terraform-path charts/consul/test/terraform/eks
aks-terraform-path: &aks-terraform-path charts/consul/test/terraform/aks
openshift-terraform-path: &openshift-terraform-path charts/consul/test/terraform/openshift

commands:
  install-prereqs:
    steps:
      - run:
          name: Install gotestsum, kind, kubectl, and helm
          command: |
            wget https://golang.org/dl/go1.17.5.linux-amd64.tar.gz
            sudo rm -rf /usr/local/go && sudo tar -C /usr/local -xzf go1.17.5.linux-amd64.tar.gz
            rm go1.17.5.linux-amd64.tar.gz
            echo 'export PATH=$PATH:/usr/local/go/bin' >> $BASH_ENV

            wget https://github.com/gotestyourself/gotestsum/releases/download/v1.6.4/gotestsum_1.6.4_linux_amd64.tar.gz
            sudo tar -C /usr/local/bin -xzf gotestsum_1.6.4_linux_amd64.tar.gz
            rm gotestsum_1.6.4_linux_amd64.tar.gz

            curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.11.0/kind-linux-amd64
            chmod +x ./kind
            sudo mv ./kind /usr/local/bin/kind

            curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin/kubectl

            wget https://get.helm.sh/helm-v3.7.0-linux-amd64.tar.gz
            tar -zxvf helm-v3.7.0-linux-amd64.tar.gz
            sudo mv linux-amd64/helm /usr/local/bin/helm

  create-kind-clusters:
    parameters:
      version:
        type: string
    steps:
      - run:
          name: Create kind clusters
          command: |
            kind create cluster --name dc1 --image kindest/node:<< parameters.version >>
            kind create cluster --name dc2 --image kindest/node:<< parameters.version >>
  run-acceptance-tests:
    parameters:
      failfast:
        type: boolean
        default: false
      additional-flags:
        type: string
      consul-k8s-image:
        type: string
        default: "docker.mirror.hashicorp.services/hashicorpdev/consul-k8s-control-plane:latest"
      go-path:
        type: string
        default: "/home/circleci/.go_workspace"
    steps:
      - when:
          condition: << parameters.failfast >>
          steps:
            - run:
                name: Run acceptance tests
                working_directory: *acceptance-test-path
                no_output_timeout: 2h
                command: |
                  # Enterprise tests can't run on fork PRs because they require
                  # a secret.
                  if [ -z "$CIRCLE_PR_NUMBER" ]; then
                    ENABLE_ENTERPRISE=true
                  fi

                  # We have to run the tests for each package separately so that we can
                  # exit early if any test fails (-failfast only works within a single
                  # package).
                  exit_code=0
                  pkgs=$(go list ./... | circleci tests split --split-by=timings --timings-type=classname)
                  echo "Running $(echo $pkgs | wc -w) packages:"
                  echo $pkgs
                  for pkg in $pkgs
                  do
                    if ! gotestsum --no-summary=all --jsonfile=jsonfile-${pkg////-} -- $pkg -p 1 -timeout 2h -failfast \
                          << parameters.additional-flags >> \
                          ${ENABLE_ENTERPRISE:+-enable-enterprise} \
                          -enable-multi-cluster \
                          -debug-directory="$TEST_RESULTS/debug" \
                          -consul-k8s-image=<< parameters.consul-k8s-image >>
                    then
                      echo "Tests in ${pkg} failed, aborting early"
                      exit_code=1
                      break
                    fi
                  done
                  gotestsum --raw-command --junitfile "$TEST_RESULTS/gotestsum-report.xml" -- cat jsonfile*
                  exit $exit_code

      - unless:
          condition: << parameters.failfast >>
          steps:
            - run:
                name: Run acceptance tests
                working_directory: *acceptance-test-path
                no_output_timeout: 2h
                command: |
                  # Enterprise tests can't run on fork PRs because they require
                  # a secret.
                  if [ -z "$CIRCLE_PR_NUMBER" ]; then
                    ENABLE_ENTERPRISE=true
                  fi

                  pkgs=$(go list ./... | circleci tests split --split-by=timings --timings-type=classname)
                  echo "Running $pkgs"
                  gotestsum --junitfile "$TEST_RESULTS/gotestsum-report.xml" -- $pkgs -p 1 -timeout 2h -failfast \
                      << parameters.additional-flags >> \
                      -enable-multi-cluster \
                      ${ENABLE_ENTERPRISE:+-enable-enterprise} \
                      -debug-directory="$TEST_RESULTS/debug" \
                      -consul-k8s-image=<< parameters.consul-k8s-image >>

jobs:
  build-distro: # defines a parameterized job
    description: A job that will build the os/arch distro set by XC_OS and XC_ARCH
    parameters:
      OS:
        description: What OSes to build
        default: ""
        type: string
      ARCH:
        description: What architectures to build
        default: ""
        type: string
    executor: go
    environment:
      GOXPARALLEL: 2 # CircleCI containers are 2 CPU x 4GB RAM
    steps:
      - checkout

      # Restore go module cache if there is one
      - restore_cache:
          keys:
            - consul-k8s-modcache-v2-{{ checksum "control-plane/go.mod" }}
      - run:
          name: build local
          working_directory: *control-plane-path
          command: XC_OS="<< parameters.OS >>" XC_ARCH="<< parameters.ARCH >>" ./build-support/scripts/build-local.sh
      # persist to downstream job
      - persist_to_workspace:
          root: .
          paths:
            - control-plane/pkg/bin
      # save dev build to CircleCI
      - store_artifacts:
          path: ./control-plane/pkg/bin

  # upload dev docker image
  dev-upload-docker:
    executor: go
    steps:
      - checkout
      # get consul-k8s binary
      - attach_workspace:
          at: .
      - setup_remote_docker
      - run:
          name: make ci.dev-docker
          working_directory: *control-plane-path
          command: make ci.dev-docker

  acceptance:
    environment:
      - TEST_RESULTS: /tmp/test-results
    machine:
      image: ubuntu-2004:202010-01
    resource_class: xlarge
    parallelism: 6
    steps:
      - checkout
      - install-prereqs
      - create-kind-clusters:
          version: "v1.22.4"
      - restore_cache:
          keys:
            - consul-helm-modcache-v2-{{ checksum "acceptance/go.mod" }}
      - run:
          name: go mod download
          working_directory: *acceptance-mod-path
          command: go mod download
      - save_cache:
          key: consul-helm-modcache-v2-{{ checksum "acceptance/go.mod" }}
          paths:
            - ~/.go_workspace/pkg/mod
      - run: mkdir -p $TEST_RESULTS
      - run-acceptance-tests:
          failfast: true
          additional-flags: -use-kind -kubecontext="kind-dc1" -secondary-kubecontext="kind-dc2"
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results

  acceptance-tproxy:
    environment:
      - TEST_RESULTS: /tmp/test-results
    machine:
      image: ubuntu-2004:202010-01
    resource_class: xlarge
    parallelism: 6
    steps:
      - checkout
      - install-prereqs
      - create-kind-clusters:
          version: "v1.22.4"
      - restore_cache:
          keys:
            - consul-helm-modcache-v2-{{ checksum "acceptance/go.mod" }}
      - run:
          name: go mod download
          working_directory: *acceptance-mod-path
          command: go mod download
      - save_cache:
          key: consul-helm-modcache-v2-{{ checksum "acceptance/go.mod" }}
          paths:
            - ~/.go_workspace/pkg/mod
      - run: mkdir -p $TEST_RESULTS
      - run-acceptance-tests:
          failfast: true
          additional-flags: -use-kind -kubecontext="kind-dc1" -secondary-kubecontext="kind-dc2" -enable-transparent-proxy
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results

  ##########################
  # CLEANUP CLOUD RESOURCES
  ##########################
  cleanup-gcp-resources:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorpdev/consul-helm-test:0.10.0
    steps:
      - run:
          name: cleanup leftover resources
          command: |
            echo "${GOOGLE_CREDENTIALS}" | gcloud auth activate-service-account --key-file=-
            clusters=$(gcloud container clusters list --zone us-central1-a --project ${CLOUDSDK_CORE_PROJECT} --format json  | jq -r '.[] | select(.name | test("^consul-k8s-\\d+$")) | .name')
            for cluster in $clusters; do
              echo "Deleting $cluster GKE cluster"
              gcloud container clusters delete $cluster --zone us-central1-a --project ${CLOUDSDK_CORE_PROJECT} --quiet
            done
      - slack/status:
          fail_only: true
          failure_message: "GKE cleanup failed"

  cleanup-azure-resources:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorpdev/consul-helm-test:0.10.0
    steps:
      - run:
          name: cleanup leftover resources
          command: |
            az login --service-principal -u "$ARM_CLIENT_ID" -p "$ARM_CLIENT_SECRET" --tenant "$ARM_TENANT_ID" > /dev/null
            resource_groups=$(az group list -o json  | jq -r '.[] | select(.name | test("^consul-k8s-\\d+$")) | .name')
            for group in $resource_groups; do
              echo "Deleting $group resource group"
              az group delete -n $group --yes
            done
      - slack/status:
          fail_only: true
          failure_message: "AKS cleanup failed"

  cleanup-eks-resources:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorpdev/consul-helm-test:0.10.0
    steps:
      - checkout
      - run:
          name: cleanup eks resources
          command: |
            # Assume the role and set environment variables.
            aws sts assume-role --role-arn "$AWS_ROLE_ARN" --role-session-name "consul-helm-$CIRCLE_BUILD_NUM" --duration-seconds 10800 > assume-role.json
            export AWS_ACCESS_KEY_ID="$(jq -r .Credentials.AccessKeyId assume-role.json)"
            export AWS_SECRET_ACCESS_KEY="$(jq -r .Credentials.SecretAccessKey assume-role.json)"
            export AWS_SESSION_TOKEN="$(jq -r .Credentials.SessionToken assume-role.json)"

            make ci.aws-acceptance-test-cleanup
      - slack/status:
          fail_only: true
          failure_message: "EKS cleanup failed"

  ########################
  # ACCEPTANCE TESTS
  ########################
  acceptance-gke-1-20:
    environment:
      - TEST_RESULTS: /tmp/test-results
    docker:
      # This image is built from test/docker/Test.dockerfile
      - image: docker.mirror.hashicorp.services/hashicorpdev/consul-helm-test:0.10.0

    steps:
      - run:
          name: Exit if forked PR
          command: |
            if [ -n "$CIRCLE_PR_NUMBER" ]; then
                echo "Skipping acceptance tests for forked PRs; marking step successful."
                circleci step halt
            fi

      - checkout

      - run:
          name: terraform init & apply
          working_directory: *gke-terraform-path
          command: |
            terraform init
            echo "${GOOGLE_CREDENTIALS}" | gcloud auth activate-service-account --key-file=-

            # On GKE, we're setting the build number instead of build URL because label values
            # cannot contain '/'.
            terraform apply \
              -var project=${CLOUDSDK_CORE_PROJECT} \
              -var init_cli=true \
              -var cluster_count=2 \
              -var labels="{\"build_number\": \"$CIRCLE_BUILD_NUM\"}" \
              -auto-approve

            primary_kubeconfig=$(terraform output -json | jq -r .kubeconfigs.value[0])
            secondary_kubeconfig=$(terraform output -json | jq -r .kubeconfigs.value[1])

            echo "export primary_kubeconfig=$primary_kubeconfig" >> $BASH_ENV
            echo "export secondary_kubeconfig=$secondary_kubeconfig" >> $BASH_ENV

      # Restore go module cache if there is one
      - restore_cache:
          keys:
            - consul-helm-acceptance-modcache-v2-{{ checksum "acceptance/go.mod" }}

      - run: mkdir -p $TEST_RESULTS

      - run-acceptance-tests:
          additional-flags: -kubeconfig="$primary_kubeconfig" -secondary-kubeconfig="$secondary_kubeconfig" -enable-pod-security-policies -enable-transparent-proxy

      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results

      - run:
          name: terraform destroy
          working_directory: *gke-terraform-path
          command: |
            terraform destroy -var project=${CLOUDSDK_CORE_PROJECT} -auto-approve
          when: always

      - slack/status:
          fail_only: true
          failure_message: "GKE acceptance tests failed. Check the logs at: ${CIRCLE_BUILD_URL}"

  acceptance-aks-1-21:
    environment:
      - TEST_RESULTS: /tmp/test-results
    docker:
      # This image is built from test/docker/Test.dockerfile
      - image: docker.mirror.hashicorp.services/hashicorpdev/consul-helm-test:0.10.0

    steps:
      - checkout

      - run:
          name: terraform init & apply
          working_directory: *aks-terraform-path
          command: |
            terraform init

            terraform apply \
              -var client_id="$ARM_CLIENT_ID" \
              -var client_secret="$ARM_CLIENT_SECRET" \
              -var cluster_count=2 \
              -var tags="{\"build_url\": \"$CIRCLE_BUILD_URL\"}" \
              -auto-approve

            primary_kubeconfig=$(terraform output -json | jq -r .kubeconfigs.value[0])
            secondary_kubeconfig=$(terraform output -json | jq -r .kubeconfigs.value[1])

            echo "export primary_kubeconfig=$primary_kubeconfig" >> $BASH_ENV
            echo "export secondary_kubeconfig=$secondary_kubeconfig" >> $BASH_ENV

      # Restore go module cache if there is one
      - restore_cache:
          keys:
            - consul-helm-acceptance-modcache-v2-{{ checksum "acceptance/go.mod" }}

      - run: mkdir -p $TEST_RESULTS

      - run-acceptance-tests:
          additional-flags: -kubeconfig="$primary_kubeconfig" -secondary-kubeconfig="$secondary_kubeconfig" -enable-transparent-proxy

      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results

      - run:
          name: terraform destroy
          working_directory: *aks-terraform-path
          command: |
            terraform destroy -auto-approve
          when: always

      - slack/status:
          fail_only: true
          failure_message: "AKS acceptance tests failed. Check the logs at: ${CIRCLE_BUILD_URL}"

  acceptance-eks-1-19:
    environment:
      - TEST_RESULTS: /tmp/test-results
    docker:
      # This image is built from test/docker/Test.dockerfile
      - image: docker.mirror.hashicorp.services/hashicorpdev/consul-helm-test:0.10.0

    steps:
      - checkout

      - run:
          name: configure aws
          command: |
            aws configure --profile helm_user set aws_access_key_id "$AWS_ACCESS_KEY_ID"
            aws configure --profile helm_user set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"
            aws configure set role_arn "$AWS_ROLE_ARN"
            aws configure set source_profile helm_user

            echo "unset AWS_ACCESS_KEY_ID" >> $BASH_ENV
            echo "unset AWS_SECRET_ACCESS_KEY" >> $BASH_ENV

      - run:
          name: terraform init & apply
          working_directory: *eks-terraform-path
          command: |
            terraform init

            terraform apply -var cluster_count=2 -var tags="{\"build_url\": \"$CIRCLE_BUILD_URL\"}" -auto-approve

            primary_kubeconfig=$(terraform output -json | jq -r .kubeconfigs.value[0])
            secondary_kubeconfig=$(terraform output -json | jq -r .kubeconfigs.value[1])

            echo "export primary_kubeconfig=$primary_kubeconfig" >> $BASH_ENV
            echo "export secondary_kubeconfig=$secondary_kubeconfig" >> $BASH_ENV

      # Restore go module cache if there is one
      - restore_cache:
          keys:
            - consul-helm-acceptance-modcache-v2-{{ checksum "acceptance/go.mod" }}

      - run: mkdir -p $TEST_RESULTS

      - run-acceptance-tests:
          additional-flags: -kubeconfig="$primary_kubeconfig" -secondary-kubeconfig="$secondary_kubeconfig" -enable-transparent-proxy

      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results

      - run:
          name: terraform destroy
          working_directory: *eks-terraform-path
          command: |
            terraform destroy -var cluster_count=2 -auto-approve
          when: always

      - slack/status:
          fail_only: true
          failure_message: "EKS acceptance tests failed. Check the logs at: ${CIRCLE_BUILD_URL}"

  acceptance-openshift:
    environment:
      TEST_RESULTS: /tmp/test-results
    parallelism: 1
    docker:
      # This image is built from test/docker/Test.dockerfile
      - image: docker.mirror.hashicorp.services/hashicorpdev/consul-helm-test:0.10.0

    steps:
      - checkout
      - run:
          name: terraform init & apply
          working_directory: *openshift-terraform-path
          command: |
            terraform init
            az login --service-principal -u "$ARM_CLIENT_ID" -p "$ARM_CLIENT_SECRET" --tenant "$ARM_TENANT_ID" > /dev/null
            terraform apply \
              -var cluster_count=2 \
              -var tags="{\"build_url\": \"$CIRCLE_BUILD_URL\"}" \
              -auto-approve

            primary_kubeconfig=$(terraform output -json | jq -r .kubeconfigs.value[0])
            secondary_kubeconfig=$(terraform output -json | jq -r .kubeconfigs.value[1])

            echo "export primary_kubeconfig=$primary_kubeconfig" >> $BASH_ENV
            echo "export secondary_kubeconfig=$secondary_kubeconfig" >> $BASH_ENV

      # Restore go module cache if there is one
      - restore_cache:
          keys:
            - consul-helm-acceptance-modcache-v2-{{ checksum "acceptance/go.mod" }}

      - run: mkdir -p $TEST_RESULTS

      - run-acceptance-tests:
          additional-flags: -kubeconfig="$primary_kubeconfig" -secondary-kubeconfig="$secondary_kubeconfig" -enable-openshift -enable-transparent-proxy

      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results

      - run:
          name: terraform destroy
          working_directory: *openshift-terraform-path
          command: |
            terraform destroy -auto-approve
          when: always

      - slack/status:
          fail_only: true
          failure_message: "OpenShift acceptance tests failed. Check the logs at: ${CIRCLE_BUILD_URL}"

  acceptance-kind-1-23:
    environment:
      - TEST_RESULTS: /tmp/test-results
    machine:
      image: ubuntu-2004:202010-01
    resource_class: xlarge
    steps:
      - checkout
      - install-prereqs
      - create-kind-clusters:
          version: "v1.23.0"
      - restore_cache:
          keys:
            - consul-helm-modcache-v2-{{ checksum "acceptance/go.mod" }}
      - run:
          name: go mod download
          working_directory: *acceptance-mod-path
          command: go mod download
      - save_cache:
          key: consul-helm-modcache-v2-{{ checksum "acceptance/go.mod" }}
          paths:
            - ~/.go_workspace/pkg/mod
      - run: mkdir -p $TEST_RESULTS
      - run-acceptance-tests:
          additional-flags: -use-kind -kubecontext="kind-dc1" -secondary-kubecontext="kind-dc2" -enable-transparent-proxy
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
      - slack/status:
          fail_only: true
          failure_message: "Acceptance tests against Kind with Kubernetes v1.22 failed. Check the logs at: ${CIRCLE_BUILD_URL}"

workflows:
  version: 2
  test-and-build:
    jobs:
     # Build control plane binaries
      - build-distro:
          OS: "freebsd linux windows"
          ARCH: "386"
          name: build-distros-386
      - build-distro:
          OS: "darwin freebsd linux solaris windows"
          ARCH: "amd64"
          name: build-distros-amd64
      - build-distro:
          OS: "linux"
          ARCH: "arm arm64"
          name: build-distros-arm-arm64
      - dev-upload-docker:
          context: consul-ci
          requires:
            - build-distros-amd64
      # Run acceptance tests using the docker image built for the control plane
      - acceptance:
          requires:
            - dev-upload-docker
      - acceptance-tproxy:
          requires:
            - dev-upload-docker
  nightly-acceptance-tests:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - main
    jobs:
      - cleanup-gcp-resources
      - cleanup-azure-resources
      - cleanup-eks-resources
      # Disable until we can use UBI images.
      #      - acceptance-openshift:
      #          requires:
      #          - cleanup-azure-resources
      - acceptance-gke-1-20:
          requires:
            - cleanup-gcp-resources
      - acceptance-eks-1-19:
          requires:
            - cleanup-eks-resources
      - acceptance-aks-1-21:
          requires:
            - cleanup-azure-resources
      - acceptance-kind-1-23
