version: 2.1

# reusable 'executor' object for jobs
executors:
  go:
    docker:
      - image: docker.mirror.hashicorp.services/circleci/golang:1.14
    environment:
      - TEST_RESULTS: /tmp/test-results # path to where test results are saved
      - CONSUL_VERSION: 71ba8300a3d25b335aff0de9f9dd2a82fc2e58f1 # Consul's OSS version to use in tests
      - CONSUL_ENT_VERSION: 9fb10787b1ec44d6a7c42c3a5f326953943fc39e # Consul's enterprise version to use in tests

commands:
  get-aws-cli:
    steps:
      - run:
          name: download and install AWS CLI
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            echo -e "${AWS_CLI_GPG_KEY}" | gpg --import
            curl -o awscliv2.sig https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip.sig
            gpg --verify awscliv2.sig awscliv2.zip
            unzip awscliv2.zip
            sudo ./aws/install
  aws-assume-role:
    steps:
      - run:
          name: assume-role aws creds
          command: |
            # assume role has duration of 15 min (the minimum allowed)
            CREDENTIALS="$(aws sts assume-role --duration-seconds 900 --role-arn ${ROLE_ARN} --role-session-name build-${CIRCLE_SHA1} | jq '.Credentials')"
            echo "export AWS_ACCESS_KEY_ID=$(echo $CREDENTIALS | jq -r '.AccessKeyId')" >> $BASH_ENV
            echo "export AWS_SECRET_ACCESS_KEY=$(echo $CREDENTIALS | jq -r '.SecretAccessKey')" >> $BASH_ENV
            echo "export AWS_SESSION_TOKEN=$(echo $CREDENTIALS | jq -r '.SessionToken')" >> $BASH_ENV
  install-dev-consul:
    description: "Pull a dev version of consul/consul-enterprise for testing"
    parameters:
      bucket:
        type: env_var_name
        default: CONSUL_DEV_ARTIFACT_BUCKET # we use the same bucket for oss/ent dev builds (at different paths)
      path:
        type: env_var_name
      sha:
        type: env_var_name
    steps:
      - run:
          name: download and install dev consul/consul-enterprise
          command: |
            aws s3 cp s3://${<< parameters.bucket >>}/${<< parameters.path >>}/${<< parameters.sha >>}.tar.gz /tmp
            sudo tar -xzvf /tmp/${<< parameters.sha >>}.tar.gz -C /usr/local/bin
            consul version

jobs:
  go-fmt-and-vet:
    executor: go
    steps:
      - checkout

      # Restore go module cache if there is one
      - restore_cache:
          keys:
            - consul-k8s-modcache-v1-{{ checksum "go.mod" }}

      - run: go mod download

      # Save go module cache if the go.mod file has changed
      - save_cache:
          key: consul-k8s-modcache-v1-{{ checksum "go.mod" }}
          paths:
            - "/go/pkg/mod"

      # check go fmt output because it does not report non-zero when there are fmt changes
      - run:
          name: check go fmt
          command: |
            files=$(go fmt ./...)
            if [ -n "$files" ]; then
              echo "The following file(s) do not conform to go fmt:"
              echo "$files"
              exit 1
            fi
      - run: go vet ./...

  # lint consul tests
  lint-consul-retry:
    executor: go
    steps:
      - checkout
      - run: go get -u github.com/hashicorp/lint-consul-retry && lint-consul-retry

  test:
    executor: go
    environment:
      TEST_RESULTS: /tmp/test-results
    parallelism: 1
    steps:
      - checkout
      - run: mkdir -p $TEST_RESULTS

      # Restore go module cache if there is one
      - restore_cache:
          keys:
            - consul-k8s-modcache-v1-{{ checksum "go.mod" }}

      # pull a dev build of consul oss from s3
      - get-aws-cli
      - aws-assume-role
      - install-dev-consul:
          path: CONSUL_DEV_ARTIFACT_PATH
          sha: CONSUL_VERSION

      # run go tests with gotestsum
      - run: |
          PACKAGE_NAMES=$(go list ./...)
          gotestsum --junitfile $TEST_RESULTS/gotestsum-report.xml -- -p 4 $PACKAGE_NAMES

      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results

  test_enterprise:
    executor: go
    environment:
      TEST_RESULTS: /tmp/test-results
    parallelism: 1
    steps:
      - checkout
      - run: mkdir -p $TEST_RESULTS

      # Restore go module cache if there is one
      - restore_cache:
          keys:
            - consul-k8s-modcache-v1-{{ checksum "go.mod" }}

      # pull a dev build of consul ent from s3
      - get-aws-cli
      - aws-assume-role
      - install-dev-consul:
          path: CONSUL_ENT_DEV_ARTIFACT_PATH
          sha: CONSUL_ENT_VERSION

      # run go tests with gotestsum
      - run: |
          PACKAGE_NAMES=$(go list ./...)
          gotestsum --junitfile $TEST_RESULTS/gotestsum-report.xml -- -tags=enterprise -p 4 $PACKAGE_NAMES
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results

  build-distro: # defines a parameterized job
    description: A job that will build the os/arch distro set by XC_OS and XC_ARCH
    parameters:
      OS:
        description: What OSes to build
        default: ""
        type: string
      ARCH:
        description: What architectures to build
        default: ""
        type: string
    executor: go
    environment:
      GOXPARALLEL: 2 # CircleCI containers are 2 CPU x 4GB RAM
    steps:
      - checkout

      # Restore go module cache if there is one
      - restore_cache:
          keys:
            - consul-k8s-modcache-v1-{{ checksum "go.mod" }}
      - run: XC_OS="<< parameters.OS >>" XC_ARCH="<< parameters.ARCH >>" ./build-support/scripts/build-local.sh
      # persist to downstream job
      - persist_to_workspace:
          root: .
          paths:
            - pkg/bin
      # save dev build to CircleCI
      - store_artifacts:
          path: ./pkg/bin

  # upload dev docker image
  dev-upload-docker:
    executor: go
    steps:
      - checkout
      # get consul-k8s binary
      - attach_workspace:
          at: .
      - setup_remote_docker
      - run: make ci.dev-docker

workflows:
  version: 2
  test-and-build:
    jobs:
      - go-fmt-and-vet
      - lint-consul-retry
      - test:
          requires:
            - go-fmt-and-vet
            - lint-consul-retry
      - test_enterprise:
          requires:
            - go-fmt-and-vet
            - lint-consul-retry
      - build-distro:
          OS: "darwin freebsd linux windows"
          ARCH: "386"
          name: build-distros-386
          requires:
            - test
            - test_enterprise
      - build-distro:
          OS: "darwin freebsd linux solaris windows"
          ARCH: "amd64"
          name: build-distros-amd64
          requires:
            - test
            - test_enterprise
      - build-distro:
          OS: "linux"
          ARCH: "arm arm64"
          name: build-distros-arm-arm64
          requires:
            - test
            - test_enterprise
      - dev-upload-docker:
          context: consul-ci
          requires:
            - build-distros-amd64
